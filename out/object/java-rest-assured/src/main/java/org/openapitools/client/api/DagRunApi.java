/*
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.google.gson.reflect.TypeToken;
import org.openapitools.client.model.DAGRun;
import org.openapitools.client.model.DAGRunCollection;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ListDagRunsForm;
import org.threeten.bp.OffsetDateTime;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.swagger.annotations.*;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import org.openapitools.client.JSON;
import static io.restassured.http.Method.*;

@Api(value = "DagRun")
public class DagRunApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private DagRunApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static DagRunApi dagRun(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new DagRunApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createDagRun(),
                deleteDagRun(),
                getDagRun(),
                getDagRuns(),
                getDagRunsBatch(),
                updateDagRun()
        );
    }

    @ApiOperation(value = "Trigger a DAG Run",
            notes = "",
            nickname = "createDagRun",
            tags = { "DAGRun" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 400, message = "Client specified an invalid argument.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 409, message = "The resource that a client tried to create already exists.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.")  })
    public CreateDagRunOper createDagRun() {
        return new CreateDagRunOper(createReqSpec());
    }

    @ApiOperation(value = "Delete a DAG Run",
            notes = "",
            nickname = "deleteDagRun",
            tags = { "DAGRun" })
    @ApiResponses(value = { 
            @ApiResponse(code = 204, message = "No content.") ,
            @ApiResponse(code = 400, message = "Client specified an invalid argument.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.")  })
    public DeleteDagRunOper deleteDagRun() {
        return new DeleteDagRunOper(createReqSpec());
    }

    @ApiOperation(value = "Get a DAG Run",
            notes = "",
            nickname = "getDagRun",
            tags = { "DAGRun" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public GetDagRunOper getDagRun() {
        return new GetDagRunOper(createReqSpec());
    }

    @ApiOperation(value = "Get all DAG Runs",
            notes = "This endpoint allows specifying `~` as the dag_id to retrieve DAG Runs for all DAGs. ",
            nickname = "getDagRuns",
            tags = { "DAGRun" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "List of DAG Runs.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.")  })
    public GetDagRunsOper getDagRuns() {
        return new GetDagRunsOper(createReqSpec());
    }

    @ApiOperation(value = "Get all DAG Runs from aall DAGs.",
            notes = "This endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL lengthlimits ",
            nickname = "getDagRunsBatch",
            tags = { "DAGRun" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "List of DAG Runs.") ,
            @ApiResponse(code = 400, message = "Client specified an invalid argument.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.")  })
    public GetDagRunsBatchOper getDagRunsBatch() {
        return new GetDagRunsBatchOper(createReqSpec());
    }

    @ApiOperation(value = "Update a DAG Run",
            notes = "",
            nickname = "updateDagRun",
            tags = { "DAGRun" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 400, message = "Client specified an invalid argument.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public UpdateDagRunOper updateDagRun() {
        return new UpdateDagRunOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public DagRunApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Trigger a DAG Run
     * 
     *
     * @see #dagIdPath The DAG ID. (required)
     * @see #dagRunIdPath The DAG Run ID. (required)
     * @see #body  (required)
     * return DAGRun
     */
    public static class CreateDagRunOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/dags/{dag_id}/dagRuns/{dag_run_id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateDagRunOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /dags/{dag_id}/dagRuns/{dag_run_id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /dags/{dag_id}/dagRuns/{dag_run_id}
         * @param handler handler
         * @return DAGRun
         */
        public DAGRun executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<DAGRun>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param daGRun (DAGRun)  (required)
         * @return operation
         */
        public CreateDagRunOper body(DAGRun daGRun) {
            reqSpec.setBody(daGRun);
            return this;
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public CreateDagRunOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        public static final String DAG_RUN_ID_PATH = "dag_run_id";

        /**
         * @param dagRunId (String) The DAG Run ID. (required)
         * @return operation
         */
        public CreateDagRunOper dagRunIdPath(Object dagRunId) {
            reqSpec.addPathParam(DAG_RUN_ID_PATH, dagRunId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateDagRunOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateDagRunOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete a DAG Run
     * 
     *
     * @see #dagIdPath The DAG ID. (required)
     * @see #dagRunIdPath The DAG Run ID. (required)
     */
    public static class DeleteDagRunOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/dags/{dag_id}/dagRuns/{dag_run_id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteDagRunOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /dags/{dag_id}/dagRuns/{dag_run_id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public DeleteDagRunOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        public static final String DAG_RUN_ID_PATH = "dag_run_id";

        /**
         * @param dagRunId (String) The DAG Run ID. (required)
         * @return operation
         */
        public DeleteDagRunOper dagRunIdPath(Object dagRunId) {
            reqSpec.addPathParam(DAG_RUN_ID_PATH, dagRunId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteDagRunOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteDagRunOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get a DAG Run
     * 
     *
     * @see #dagIdPath The DAG ID. (required)
     * @see #dagRunIdPath The DAG Run ID. (required)
     * return DAGRun
     */
    public static class GetDagRunOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/dags/{dag_id}/dagRuns/{dag_run_id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetDagRunOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /dags/{dag_id}/dagRuns/{dag_run_id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /dags/{dag_id}/dagRuns/{dag_run_id}
         * @param handler handler
         * @return DAGRun
         */
        public DAGRun executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<DAGRun>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public GetDagRunOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        public static final String DAG_RUN_ID_PATH = "dag_run_id";

        /**
         * @param dagRunId (String) The DAG Run ID. (required)
         * @return operation
         */
        public GetDagRunOper dagRunIdPath(Object dagRunId) {
            reqSpec.addPathParam(DAG_RUN_ID_PATH, dagRunId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetDagRunOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetDagRunOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get all DAG Runs
     * This endpoint allows specifying &#x60;~&#x60; as the dag_id to retrieve DAG Runs for all DAGs. 
     *
     * @see #dagIdPath The DAG ID. (required)
     * @see #limitQuery The numbers of items to return. (optional, default to 100)
     * @see #offsetQuery The number of items to skip before starting to collect the result set. (optional)
     * @see #executionDateGteQuery Returns objects greater or equal to the specified date. This can be combined with execution_date_lte parameter to receive only the selected period.  (optional)
     * @see #executionDateLteQuery Returns objects less than or equal to the specified date. This can be combined with execution_date_gte parameter to receive only the selected period.  (optional)
     * @see #startDateGteQuery Returns objects greater or equal the specified date. This can be combined with startd_ate_lte parameter to receive only the selected period.  (optional)
     * @see #startDateLteQuery Returns objects less or equal the specified date. This can be combined with start_date_gte parameter to receive only the selected period.  (optional)
     * @see #endDateGteQuery Returns objects greater or equal the specified date. This can be combined with start_date_lte parameter to receive only the selected period.  (optional)
     * @see #endDateLteQuery Returns objects less than or equal to the specified date. This can be combined with start_date_gte parameter to receive only the selected period.  (optional)
     * return DAGRunCollection
     */
    public static class GetDagRunsOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/dags/{dag_id}/dagRuns";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetDagRunsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /dags/{dag_id}/dagRuns
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /dags/{dag_id}/dagRuns
         * @param handler handler
         * @return DAGRunCollection
         */
        public DAGRunCollection executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<DAGRunCollection>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public GetDagRunsOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) The numbers of items to return. (optional, default to 100)
         * @return operation
         */
        public GetDagRunsOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) The number of items to skip before starting to collect the result set. (optional)
         * @return operation
         */
        public GetDagRunsOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        public static final String EXECUTION_DATE_GTE_QUERY = "execution_date_gte";

        /**
         * @param executionDateGte (OffsetDateTime) Returns objects greater or equal to the specified date. This can be combined with execution_date_lte parameter to receive only the selected period.  (optional)
         * @return operation
         */
        public GetDagRunsOper executionDateGteQuery(Object... executionDateGte) {
            reqSpec.addQueryParam(EXECUTION_DATE_GTE_QUERY, executionDateGte);
            return this;
        }

        public static final String EXECUTION_DATE_LTE_QUERY = "execution_date_lte";

        /**
         * @param executionDateLte (OffsetDateTime) Returns objects less than or equal to the specified date. This can be combined with execution_date_gte parameter to receive only the selected period.  (optional)
         * @return operation
         */
        public GetDagRunsOper executionDateLteQuery(Object... executionDateLte) {
            reqSpec.addQueryParam(EXECUTION_DATE_LTE_QUERY, executionDateLte);
            return this;
        }

        public static final String START_DATE_GTE_QUERY = "start_date_gte";

        /**
         * @param startDateGte (OffsetDateTime) Returns objects greater or equal the specified date. This can be combined with startd_ate_lte parameter to receive only the selected period.  (optional)
         * @return operation
         */
        public GetDagRunsOper startDateGteQuery(Object... startDateGte) {
            reqSpec.addQueryParam(START_DATE_GTE_QUERY, startDateGte);
            return this;
        }

        public static final String START_DATE_LTE_QUERY = "start_date_lte";

        /**
         * @param startDateLte (OffsetDateTime) Returns objects less or equal the specified date. This can be combined with start_date_gte parameter to receive only the selected period.  (optional)
         * @return operation
         */
        public GetDagRunsOper startDateLteQuery(Object... startDateLte) {
            reqSpec.addQueryParam(START_DATE_LTE_QUERY, startDateLte);
            return this;
        }

        public static final String END_DATE_GTE_QUERY = "end_date_gte";

        /**
         * @param endDateGte (OffsetDateTime) Returns objects greater or equal the specified date. This can be combined with start_date_lte parameter to receive only the selected period.  (optional)
         * @return operation
         */
        public GetDagRunsOper endDateGteQuery(Object... endDateGte) {
            reqSpec.addQueryParam(END_DATE_GTE_QUERY, endDateGte);
            return this;
        }

        public static final String END_DATE_LTE_QUERY = "end_date_lte";

        /**
         * @param endDateLte (OffsetDateTime) Returns objects less than or equal to the specified date. This can be combined with start_date_gte parameter to receive only the selected period.  (optional)
         * @return operation
         */
        public GetDagRunsOper endDateLteQuery(Object... endDateLte) {
            reqSpec.addQueryParam(END_DATE_LTE_QUERY, endDateLte);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetDagRunsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetDagRunsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get all DAG Runs from aall DAGs.
     * This endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL lengthlimits 
     *
     * @see #body  (required)
     * return DAGRunCollection
     */
    public static class GetDagRunsBatchOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/dags/~/dagRuns/list";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetDagRunsBatchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /dags/~/dagRuns/list
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /dags/~/dagRuns/list
         * @param handler handler
         * @return DAGRunCollection
         */
        public DAGRunCollection executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<DAGRunCollection>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param listDagRunsForm (ListDagRunsForm)  (required)
         * @return operation
         */
        public GetDagRunsBatchOper body(ListDagRunsForm listDagRunsForm) {
            reqSpec.setBody(listDagRunsForm);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetDagRunsBatchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetDagRunsBatchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update a DAG Run
     * 
     *
     * @see #dagIdPath The DAG ID. (required)
     * @see #dagRunIdPath The DAG Run ID. (required)
     * @see #body  (required)
     * @see #updateMaskQuery The fields to update on the connection (connection, pool etc). If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields.  (optional, default to new ArrayList&lt;String&gt;())
     * return DAGRun
     */
    public static class UpdateDagRunOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/dags/{dag_id}/dagRuns/{dag_run_id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateDagRunOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /dags/{dag_id}/dagRuns/{dag_run_id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /dags/{dag_id}/dagRuns/{dag_run_id}
         * @param handler handler
         * @return DAGRun
         */
        public DAGRun executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<DAGRun>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param daGRun (DAGRun)  (required)
         * @return operation
         */
        public UpdateDagRunOper body(DAGRun daGRun) {
            reqSpec.setBody(daGRun);
            return this;
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public UpdateDagRunOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        public static final String DAG_RUN_ID_PATH = "dag_run_id";

        /**
         * @param dagRunId (String) The DAG Run ID. (required)
         * @return operation
         */
        public UpdateDagRunOper dagRunIdPath(Object dagRunId) {
            reqSpec.addPathParam(DAG_RUN_ID_PATH, dagRunId);
            return this;
        }

        public static final String UPDATE_MASK_QUERY = "update_mask";

        /**
         * @param updateMask (List&lt;String&gt;) The fields to update on the connection (connection, pool etc). If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields.  (optional, default to new ArrayList&lt;String&gt;())
         * @return operation
         */
        public UpdateDagRunOper updateMaskQuery(Object... updateMask) {
            reqSpec.addQueryParam(UPDATE_MASK_QUERY, updateMask);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateDagRunOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateDagRunOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}

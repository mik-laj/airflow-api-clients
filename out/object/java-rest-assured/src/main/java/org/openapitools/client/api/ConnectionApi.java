/*
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.google.gson.reflect.TypeToken;
import org.openapitools.client.model.Connection;
import org.openapitools.client.model.ConnectionCollection;
import org.openapitools.client.model.Error;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.swagger.annotations.*;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import org.openapitools.client.JSON;
import static io.restassured.http.Method.*;

@Api(value = "Connection")
public class ConnectionApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private ConnectionApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static ConnectionApi connection(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new ConnectionApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createConnection(),
                deleteConnection(),
                getConnection(),
                getConnections(),
                updateConnection()
        );
    }

    @ApiOperation(value = "Create connection entry",
            notes = "",
            nickname = "createConnection",
            tags = { "Connection" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 400, message = "Client specified an invalid argument.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.")  })
    public CreateConnectionOper createConnection() {
        return new CreateConnectionOper(createReqSpec());
    }

    @ApiOperation(value = "Delete a connection entry",
            notes = "",
            nickname = "deleteConnection",
            tags = { "Connection" })
    @ApiResponses(value = { 
            @ApiResponse(code = 204, message = "No content.") ,
            @ApiResponse(code = 400, message = "Client specified an invalid argument.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.")  })
    public DeleteConnectionOper deleteConnection() {
        return new DeleteConnectionOper(createReqSpec());
    }

    @ApiOperation(value = "Get a connection entry",
            notes = "",
            nickname = "getConnection",
            tags = { "Connection" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public GetConnectionOper getConnection() {
        return new GetConnectionOper(createReqSpec());
    }

    @ApiOperation(value = "Get all connection entries",
            notes = "",
            nickname = "getConnections",
            tags = { "Connection" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "List of connection entry.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.")  })
    public GetConnectionsOper getConnections() {
        return new GetConnectionsOper(createReqSpec());
    }

    @ApiOperation(value = "Update a connection entry",
            notes = "",
            nickname = "updateConnection",
            tags = { "Connection" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 400, message = "Client specified an invalid argument.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public UpdateConnectionOper updateConnection() {
        return new UpdateConnectionOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public ConnectionApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Create connection entry
     * 
     *
     * @see #body  (required)
     * return Connection
     */
    public static class CreateConnectionOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/connections";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateConnectionOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /connections
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /connections
         * @param handler handler
         * @return Connection
         */
        public Connection executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Connection>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param connection (Connection)  (required)
         * @return operation
         */
        public CreateConnectionOper body(Connection connection) {
            reqSpec.setBody(connection);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateConnectionOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateConnectionOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete a connection entry
     * 
     *
     * @see #connectionIdPath The Connection ID. (required)
     */
    public static class DeleteConnectionOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/connections/{connection_id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteConnectionOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /connections/{connection_id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String CONNECTION_ID_PATH = "connection_id";

        /**
         * @param connectionId (Integer) The Connection ID. (required)
         * @return operation
         */
        public DeleteConnectionOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteConnectionOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteConnectionOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get a connection entry
     * 
     *
     * @see #connectionIdPath The Connection ID. (required)
     * return Connection
     */
    public static class GetConnectionOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/connections/{connection_id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetConnectionOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /connections/{connection_id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /connections/{connection_id}
         * @param handler handler
         * @return Connection
         */
        public Connection executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Connection>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String CONNECTION_ID_PATH = "connection_id";

        /**
         * @param connectionId (Integer) The Connection ID. (required)
         * @return operation
         */
        public GetConnectionOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetConnectionOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetConnectionOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get all connection entries
     * 
     *
     * @see #limitQuery The numbers of items to return. (optional, default to 100)
     * @see #offsetQuery The number of items to skip before starting to collect the result set. (optional)
     * return ConnectionCollection
     */
    public static class GetConnectionsOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/connections";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetConnectionsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /connections
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /connections
         * @param handler handler
         * @return ConnectionCollection
         */
        public ConnectionCollection executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<ConnectionCollection>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) The numbers of items to return. (optional, default to 100)
         * @return operation
         */
        public GetConnectionsOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) The number of items to skip before starting to collect the result set. (optional)
         * @return operation
         */
        public GetConnectionsOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetConnectionsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetConnectionsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update a connection entry
     * 
     *
     * @see #connectionIdPath The Connection ID. (required)
     * @see #body  (required)
     * @see #updateMaskQuery The fields to update on the connection (connection, pool etc). If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields.  (optional, default to new ArrayList&lt;String&gt;())
     * return Connection
     */
    public static class UpdateConnectionOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/connections/{connection_id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateConnectionOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /connections/{connection_id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /connections/{connection_id}
         * @param handler handler
         * @return Connection
         */
        public Connection executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Connection>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param connection (Connection)  (required)
         * @return operation
         */
        public UpdateConnectionOper body(Connection connection) {
            reqSpec.setBody(connection);
            return this;
        }

        public static final String CONNECTION_ID_PATH = "connection_id";

        /**
         * @param connectionId (Integer) The Connection ID. (required)
         * @return operation
         */
        public UpdateConnectionOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        public static final String UPDATE_MASK_QUERY = "update_mask";

        /**
         * @param updateMask (List&lt;String&gt;) The fields to update on the connection (connection, pool etc). If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields.  (optional, default to new ArrayList&lt;String&gt;())
         * @return operation
         */
        public UpdateConnectionOper updateMaskQuery(Object... updateMask) {
            reqSpec.addQueryParam(UPDATE_MASK_QUERY, updateMask);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateConnectionOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateConnectionOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}

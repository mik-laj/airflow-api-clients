/*
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.google.gson.reflect.TypeToken;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.XCom;
import org.openapitools.client.model.XComCollection;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.swagger.annotations.*;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import org.openapitools.client.JSON;
import static io.restassured.http.Method.*;

@Api(value = "XCom")
public class XComApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private XComApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static XComApi xCom(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new XComApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                deleteXComValue(),
                getXComEntry(),
                getXComValue(),
                updateXComEntry(),
                updateXComValue()
        );
    }

    @ApiOperation(value = "Delete an XCom entry",
            notes = "",
            nickname = "deleteXComValue",
            tags = { "XCom" })
    @ApiResponses(value = { 
            @ApiResponse(code = 204, message = "No content.") ,
            @ApiResponse(code = 400, message = "Client specified an invalid argument.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.")  })
    public DeleteXComValueOper deleteXComValue() {
        return new DeleteXComValueOper(createReqSpec());
    }

    @ApiOperation(value = "Get all XCom entries",
            notes = "This endpoint allows specifying `~` as the dag_id, dag_run_id, task_id to retrieve XCOM entries for for all DAGs, DAG Runs and task instances.",
            nickname = "getXComEntry",
            tags = { "XCom" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "List of XCom entries.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.")  })
    public GetXComEntryOper getXComEntry() {
        return new GetXComEntryOper(createReqSpec());
    }

    @ApiOperation(value = "Get an XCom entry",
            notes = "",
            nickname = "getXComValue",
            tags = { "XCom" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public GetXComValueOper getXComValue() {
        return new GetXComValueOper(createReqSpec());
    }

    @ApiOperation(value = "Create an XCom entry",
            notes = "",
            nickname = "updateXComEntry",
            tags = { "XCom" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 400, message = "Client specified an invalid argument.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.")  })
    public UpdateXComEntryOper updateXComEntry() {
        return new UpdateXComEntryOper(createReqSpec());
    }

    @ApiOperation(value = "Update an XCom entry",
            notes = "",
            nickname = "updateXComValue",
            tags = { "XCom" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 400, message = "Client specified an invalid argument.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public UpdateXComValueOper updateXComValue() {
        return new UpdateXComValueOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public XComApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Delete an XCom entry
     * 
     *
     * @see #dagIdPath The DAG ID. (required)
     * @see #dagRunIdPath The DAG Run ID. (required)
     * @see #taskIdPath The Task ID. (required)
     * @see #keyPath The XCom Key. (required)
     */
    public static class DeleteXComValueOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{key}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteXComValueOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{key}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public DeleteXComValueOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        public static final String DAG_RUN_ID_PATH = "dag_run_id";

        /**
         * @param dagRunId (String) The DAG Run ID. (required)
         * @return operation
         */
        public DeleteXComValueOper dagRunIdPath(Object dagRunId) {
            reqSpec.addPathParam(DAG_RUN_ID_PATH, dagRunId);
            return this;
        }

        public static final String TASK_ID_PATH = "task_id";

        /**
         * @param taskId (String) The Task ID. (required)
         * @return operation
         */
        public DeleteXComValueOper taskIdPath(Object taskId) {
            reqSpec.addPathParam(TASK_ID_PATH, taskId);
            return this;
        }

        public static final String KEY_PATH = "key";

        /**
         * @param key (String) The XCom Key. (required)
         * @return operation
         */
        public DeleteXComValueOper keyPath(Object key) {
            reqSpec.addPathParam(KEY_PATH, key);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteXComValueOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteXComValueOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get all XCom entries
     * This endpoint allows specifying &#x60;~&#x60; as the dag_id, dag_run_id, task_id to retrieve XCOM entries for for all DAGs, DAG Runs and task instances.
     *
     * @see #dagIdPath The DAG ID. (required)
     * @see #dagRunIdPath The DAG Run ID. (required)
     * @see #taskIdPath The Task ID. (required)
     * @see #limitQuery The numbers of items to return. (optional, default to 100)
     * @see #offsetQuery The number of items to skip before starting to collect the result set. (optional)
     * return XComCollection
     */
    public static class GetXComEntryOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetXComEntryOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries
         * @param handler handler
         * @return XComCollection
         */
        public XComCollection executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<XComCollection>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public GetXComEntryOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        public static final String DAG_RUN_ID_PATH = "dag_run_id";

        /**
         * @param dagRunId (String) The DAG Run ID. (required)
         * @return operation
         */
        public GetXComEntryOper dagRunIdPath(Object dagRunId) {
            reqSpec.addPathParam(DAG_RUN_ID_PATH, dagRunId);
            return this;
        }

        public static final String TASK_ID_PATH = "task_id";

        /**
         * @param taskId (String) The Task ID. (required)
         * @return operation
         */
        public GetXComEntryOper taskIdPath(Object taskId) {
            reqSpec.addPathParam(TASK_ID_PATH, taskId);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) The numbers of items to return. (optional, default to 100)
         * @return operation
         */
        public GetXComEntryOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) The number of items to skip before starting to collect the result set. (optional)
         * @return operation
         */
        public GetXComEntryOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetXComEntryOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetXComEntryOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get an XCom entry
     * 
     *
     * @see #dagIdPath The DAG ID. (required)
     * @see #dagRunIdPath The DAG Run ID. (required)
     * @see #taskIdPath The Task ID. (required)
     * @see #keyPath The XCom Key. (required)
     * return XCom
     */
    public static class GetXComValueOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{key}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetXComValueOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{key}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{key}
         * @param handler handler
         * @return XCom
         */
        public XCom executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<XCom>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public GetXComValueOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        public static final String DAG_RUN_ID_PATH = "dag_run_id";

        /**
         * @param dagRunId (String) The DAG Run ID. (required)
         * @return operation
         */
        public GetXComValueOper dagRunIdPath(Object dagRunId) {
            reqSpec.addPathParam(DAG_RUN_ID_PATH, dagRunId);
            return this;
        }

        public static final String TASK_ID_PATH = "task_id";

        /**
         * @param taskId (String) The Task ID. (required)
         * @return operation
         */
        public GetXComValueOper taskIdPath(Object taskId) {
            reqSpec.addPathParam(TASK_ID_PATH, taskId);
            return this;
        }

        public static final String KEY_PATH = "key";

        /**
         * @param key (String) The XCom Key. (required)
         * @return operation
         */
        public GetXComValueOper keyPath(Object key) {
            reqSpec.addPathParam(KEY_PATH, key);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetXComValueOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetXComValueOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Create an XCom entry
     * 
     *
     * @see #dagIdPath The DAG ID. (required)
     * @see #dagRunIdPath The DAG Run ID. (required)
     * @see #taskIdPath The Task ID. (required)
     * @see #body  (required)
     * return XCom
     */
    public static class UpdateXComEntryOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateXComEntryOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries
         * @param handler handler
         * @return XCom
         */
        public XCom executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<XCom>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param xcom (XCom)  (required)
         * @return operation
         */
        public UpdateXComEntryOper body(XCom xcom) {
            reqSpec.setBody(xcom);
            return this;
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public UpdateXComEntryOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        public static final String DAG_RUN_ID_PATH = "dag_run_id";

        /**
         * @param dagRunId (String) The DAG Run ID. (required)
         * @return operation
         */
        public UpdateXComEntryOper dagRunIdPath(Object dagRunId) {
            reqSpec.addPathParam(DAG_RUN_ID_PATH, dagRunId);
            return this;
        }

        public static final String TASK_ID_PATH = "task_id";

        /**
         * @param taskId (String) The Task ID. (required)
         * @return operation
         */
        public UpdateXComEntryOper taskIdPath(Object taskId) {
            reqSpec.addPathParam(TASK_ID_PATH, taskId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateXComEntryOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateXComEntryOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update an XCom entry
     * 
     *
     * @see #dagIdPath The DAG ID. (required)
     * @see #dagRunIdPath The DAG Run ID. (required)
     * @see #taskIdPath The Task ID. (required)
     * @see #keyPath The XCom Key. (required)
     * @see #body  (required)
     * @see #updateMaskQuery The fields to update on the connection (connection, pool etc). If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields.  (optional, default to new ArrayList&lt;String&gt;())
     * return XCom
     */
    public static class UpdateXComValueOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{key}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateXComValueOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{key}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{key}
         * @param handler handler
         * @return XCom
         */
        public XCom executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<XCom>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param xcom (XCom)  (required)
         * @return operation
         */
        public UpdateXComValueOper body(XCom xcom) {
            reqSpec.setBody(xcom);
            return this;
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public UpdateXComValueOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        public static final String DAG_RUN_ID_PATH = "dag_run_id";

        /**
         * @param dagRunId (String) The DAG Run ID. (required)
         * @return operation
         */
        public UpdateXComValueOper dagRunIdPath(Object dagRunId) {
            reqSpec.addPathParam(DAG_RUN_ID_PATH, dagRunId);
            return this;
        }

        public static final String TASK_ID_PATH = "task_id";

        /**
         * @param taskId (String) The Task ID. (required)
         * @return operation
         */
        public UpdateXComValueOper taskIdPath(Object taskId) {
            reqSpec.addPathParam(TASK_ID_PATH, taskId);
            return this;
        }

        public static final String KEY_PATH = "key";

        /**
         * @param key (String) The XCom Key. (required)
         * @return operation
         */
        public UpdateXComValueOper keyPath(Object key) {
            reqSpec.addPathParam(KEY_PATH, key);
            return this;
        }

        public static final String UPDATE_MASK_QUERY = "update_mask";

        /**
         * @param updateMask (List&lt;String&gt;) The fields to update on the connection (connection, pool etc). If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields.  (optional, default to new ArrayList&lt;String&gt;())
         * @return operation
         */
        public UpdateXComValueOper updateMaskQuery(Object... updateMask) {
            reqSpec.addQueryParam(UPDATE_MASK_QUERY, updateMask);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateXComValueOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateXComValueOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}

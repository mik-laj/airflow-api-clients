/*
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.google.gson.reflect.TypeToken;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.EventLog;
import org.openapitools.client.model.EventLogCollection;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.swagger.annotations.*;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import org.openapitools.client.JSON;
import static io.restassured.http.Method.*;

@Api(value = "EventLog")
public class EventLogApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private EventLogApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static EventLogApi eventLog(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new EventLogApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                getEventLog(),
                getEventLogEntry()
        );
    }

    @ApiOperation(value = "Get all log entries from event log",
            notes = "",
            nickname = "getEventLog",
            tags = { "EventLog" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "List of log entries.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.")  })
    public GetEventLogOper getEventLog() {
        return new GetEventLogOper(createReqSpec());
    }

    @ApiOperation(value = "Get a log entry",
            notes = "",
            nickname = "getEventLogEntry",
            tags = { "EventLog" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public GetEventLogEntryOper getEventLogEntry() {
        return new GetEventLogEntryOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public EventLogApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Get all log entries from event log
     * 
     *
     * @see #limitQuery The numbers of items to return. (optional, default to 100)
     * @see #offsetQuery The number of items to skip before starting to collect the result set. (optional)
     * return EventLogCollection
     */
    public static class GetEventLogOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/eventLogs";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetEventLogOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /eventLogs
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /eventLogs
         * @param handler handler
         * @return EventLogCollection
         */
        public EventLogCollection executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<EventLogCollection>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) The numbers of items to return. (optional, default to 100)
         * @return operation
         */
        public GetEventLogOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) The number of items to skip before starting to collect the result set. (optional)
         * @return operation
         */
        public GetEventLogOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetEventLogOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetEventLogOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get a log entry
     * 
     *
     * @see #eventLogIdPath The Event Log ID. (required)
     * return EventLog
     */
    public static class GetEventLogEntryOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/eventLogs/{event_log_id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetEventLogEntryOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /eventLogs/{event_log_id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /eventLogs/{event_log_id}
         * @param handler handler
         * @return EventLog
         */
        public EventLog executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<EventLog>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String EVENT_LOG_ID_PATH = "event_log_id";

        /**
         * @param eventLogId (Integer) The Event Log ID. (required)
         * @return operation
         */
        public GetEventLogEntryOper eventLogIdPath(Object eventLogId) {
            reqSpec.addPathParam(EVENT_LOG_ID_PATH, eventLogId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetEventLogEntryOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetEventLogEntryOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}

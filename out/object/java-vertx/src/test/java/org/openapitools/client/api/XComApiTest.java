/*
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.model.Error;
import org.openapitools.client.model.XCom;
import org.openapitools.client.model.XComCollection;

import org.openapitools.client.Configuration;

import org.junit.Test;
import org.junit.Ignore;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.runner.RunWith;

import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonObject;
import io.vertx.core.Vertx;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import io.vertx.ext.unit.junit.RunTestOnContext;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.Async;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for XComApi
 */
@RunWith(VertxUnitRunner.class)
@Ignore
public class XComApiTest {

    private XComApi api;

    @Rule
    public RunTestOnContext rule = new RunTestOnContext();

    @BeforeClass
    public void setupApiClient() {
        JsonObject config = new JsonObject();
        Vertx vertx = rule.vertx();
        Configuration.setupDefaultApiClient(vertx, config);

        api = new XComApiImpl();
    }
    
    /**
     * Delete an XCom entry
     * 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void deleteXComValueTest(TestContext context) {
        Async async = context.async();
        String dagId = null;
        String dagRunId = null;
        String taskId = null;
        String key = null;
        api.deleteXComValue(dagId, dagRunId, taskId, key, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * Get all XCom entries
     * This endpoint allows specifying &#x60;~&#x60; as the dag_id, dag_run_id, task_id to retrieve XCOM entries for for all DAGs, DAG Runs and task instances.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getXComEntryTest(TestContext context) {
        Async async = context.async();
        String dagId = null;
        String dagRunId = null;
        String taskId = null;
        Integer limit = null;
        Integer offset = null;
        api.getXComEntry(dagId, dagRunId, taskId, limit, offset, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * Get an XCom entry
     * 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getXComValueTest(TestContext context) {
        Async async = context.async();
        String dagId = null;
        String dagRunId = null;
        String taskId = null;
        String key = null;
        api.getXComValue(dagId, dagRunId, taskId, key, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * Create an XCom entry
     * 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void updateXComEntryTest(TestContext context) {
        Async async = context.async();
        String dagId = null;
        String dagRunId = null;
        String taskId = null;
        XCom xcom = null;
        api.updateXComEntry(dagId, dagRunId, taskId, xcom, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * Update an XCom entry
     * 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void updateXComValueTest(TestContext context) {
        Async async = context.async();
        String dagId = null;
        String dagRunId = null;
        String taskId = null;
        String key = null;
        XCom xcom = null;
        List<String> updateMask = null;
        api.updateXComValue(dagId, dagRunId, taskId, key, xcom, updateMask, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
}

/*
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.api.client.http.HttpContent;
import com.google.api.client.json.JsonObjectParser;
import com.google.common.base.Splitter;
import org.openapitools.client.model.DAGRun;
import org.openapitools.client.model.DAGRunCollection;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ListDagRunsForm;
import org.threeten.bp.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.io.IOException;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DagRunApi
 */
public class DagRunApiTest {

    private final DagRunApi api = new DagRunApi();

    
    /**
     * Trigger a DAG Run
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void dagTest() throws IOException {
        DAGRun dagRun = new DAGRun();
        HashMap<Object, Object> confObject = new HashMap<>();
        String array[] = new String[] {"1", "2", "3"};
        confObject.put("a", array);
        confObject.put("b", "c");
        dagRun.setConf(confObject);
        ObjectMapper mapper = api.getApiClient().getObjectMapper();
        String data = mapper.writer().writeValueAsString(dagRun);
        System.out.println(data);
        TypeReference<DAGRun> typeRef = new TypeReference<DAGRun>() {};
        DAGRun dagRunRead = mapper.readValue(data, typeRef);
        System.out.println();
        System.out.println(dagRunRead);
        System.out.println(dagRunRead.getConf().getClass());

        DAGRun dagRun2 = new DAGRun();
        HashMap confObject2 =
                mapper.readValue("{\"a\":[\"1\", \"2\", \"3\"],\"b\":\"c\" }", confObject.getClass());
        dagRun2.setConf(confObject2);
        String data2 = mapper.writer().writeValueAsString(dagRun2);
        System.out.println(data2);
        DAGRun dagRunRead2 = mapper.readValue(data2, typeRef);
        System.out.println();
        System.out.println(dagRunRead2);
        System.out.println(dagRunRead2.getConf().getClass());

        // TODO: test validations
    }
    
    /**
     * Delete a DAG Run
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void deleteDagRunTest() throws IOException {
        String dagId = null;
        String dagRunId = null;
        api.deleteDagRun(dagId, dagRunId);

        // TODO: test validations
    }
    
    /**
     * Get a DAG Run
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void getDagRunTest() throws IOException {
        String dagId = null;
        String dagRunId = null;
        DAGRun response = api.getDagRun(dagId, dagRunId);

        // TODO: test validations
    }
    
    /**
     * Get all DAG Runs
     *
     * This endpoint allows specifying &#x60;~&#x60; as the dag_id to retrieve DAG Runs for all DAGs. 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void getDagRunsTest() throws IOException {
        String dagId = null;
        Integer limit = null;
        Integer offset = null;
        OffsetDateTime executionDateGte = null;
        OffsetDateTime executionDateLte = null;
        OffsetDateTime startDateGte = null;
        OffsetDateTime startDateLte = null;
        OffsetDateTime endDateGte = null;
        OffsetDateTime endDateLte = null;
        DAGRunCollection response = api.getDagRuns(dagId, limit, offset, executionDateGte, executionDateLte, startDateGte, startDateLte, endDateGte, endDateLte);

        // TODO: test validations
    }
    
    /**
     * Get all DAG Runs from aall DAGs.
     *
     * This endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL lengthlimits 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void getDagRunsBatchTest() throws IOException {
        ListDagRunsForm listDagRunsForm = null;
        DAGRunCollection response = api.getDagRunsBatch(listDagRunsForm);

        // TODO: test validations
    }
    
    /**
     * Update a DAG Run
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void updateDagRunTest() throws IOException {
        String dagId = null;
        String dagRunId = null;
        DAGRun daGRun = null;
        List<String> updateMask = null;
        DAGRun response = api.updateDagRun(dagId, dagRunId, daGRun, updateMask);

        // TODO: test validations
    }
    
}

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.dag import DAG
from openapi_server.models.dag_detail_all_of import DAGDetailAllOf
from openapi_server.models.one_of_schedule_interval import OneOfScheduleInterval
from openapi_server.models.tag import Tag
from openapi_server.models.time_delta import TimeDelta
from openapi_server import util

from openapi_server.models.dag import DAG  # noqa: E501
from openapi_server.models.dag_detail_all_of import DAGDetailAllOf  # noqa: E501
from openapi_server.models.one_of_schedule_interval import OneOfScheduleInterval  # noqa: E501
from openapi_server.models.tag import Tag  # noqa: E501
from openapi_server.models.time_delta import TimeDelta  # noqa: E501

class DAGDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dag_id=None, root_dag_id=None, is_paused=None, is_subdag=None, fileloc=None, file_token=None, owners=None, description=None, schedule_interval=None, tags=None, timezone=None, catchup=None, orientation=None, concurrency=None, start_date=None, dag_run_timeout=None, doc_md=None, default_view=None):  # noqa: E501
        """DAGDetail - a model defined in OpenAPI

        :param dag_id: The dag_id of this DAGDetail.  # noqa: E501
        :type dag_id: str
        :param root_dag_id: The root_dag_id of this DAGDetail.  # noqa: E501
        :type root_dag_id: str
        :param is_paused: The is_paused of this DAGDetail.  # noqa: E501
        :type is_paused: bool
        :param is_subdag: The is_subdag of this DAGDetail.  # noqa: E501
        :type is_subdag: bool
        :param fileloc: The fileloc of this DAGDetail.  # noqa: E501
        :type fileloc: str
        :param file_token: The file_token of this DAGDetail.  # noqa: E501
        :type file_token: str
        :param owners: The owners of this DAGDetail.  # noqa: E501
        :type owners: List[str]
        :param description: The description of this DAGDetail.  # noqa: E501
        :type description: str
        :param schedule_interval: The schedule_interval of this DAGDetail.  # noqa: E501
        :type schedule_interval: OneOfScheduleInterval
        :param tags: The tags of this DAGDetail.  # noqa: E501
        :type tags: List[Tag]
        :param timezone: The timezone of this DAGDetail.  # noqa: E501
        :type timezone: str
        :param catchup: The catchup of this DAGDetail.  # noqa: E501
        :type catchup: bool
        :param orientation: The orientation of this DAGDetail.  # noqa: E501
        :type orientation: str
        :param concurrency: The concurrency of this DAGDetail.  # noqa: E501
        :type concurrency: float
        :param start_date: The start_date of this DAGDetail.  # noqa: E501
        :type start_date: datetime
        :param dag_run_timeout: The dag_run_timeout of this DAGDetail.  # noqa: E501
        :type dag_run_timeout: TimeDelta
        :param doc_md: The doc_md of this DAGDetail.  # noqa: E501
        :type doc_md: str
        :param default_view: The default_view of this DAGDetail.  # noqa: E501
        :type default_view: str
        """
        self.openapi_types = {
            'dag_id': str,
            'root_dag_id': str,
            'is_paused': bool,
            'is_subdag': bool,
            'fileloc': str,
            'file_token': str,
            'owners': List[str],
            'description': str,
            'schedule_interval': OneOfScheduleInterval,
            'tags': List[Tag],
            'timezone': str,
            'catchup': bool,
            'orientation': str,
            'concurrency': float,
            'start_date': datetime,
            'dag_run_timeout': TimeDelta,
            'doc_md': str,
            'default_view': str
        }

        self.attribute_map = {
            'dag_id': 'dag_id',
            'root_dag_id': 'root_dag_id',
            'is_paused': 'is_paused',
            'is_subdag': 'is_subdag',
            'fileloc': 'fileloc',
            'file_token': 'file_token',
            'owners': 'owners',
            'description': 'description',
            'schedule_interval': 'schedule_interval',
            'tags': 'tags',
            'timezone': 'timezone',
            'catchup': 'catchup',
            'orientation': 'orientation',
            'concurrency': 'concurrency',
            'start_date': 'start_date',
            'dag_run_timeout': 'dag_run_timeout',
            'doc_md': 'doc_md',
            'default_view': 'default_view'
        }

        self._dag_id = dag_id
        self._root_dag_id = root_dag_id
        self._is_paused = is_paused
        self._is_subdag = is_subdag
        self._fileloc = fileloc
        self._file_token = file_token
        self._owners = owners
        self._description = description
        self._schedule_interval = schedule_interval
        self._tags = tags
        self._timezone = timezone
        self._catchup = catchup
        self._orientation = orientation
        self._concurrency = concurrency
        self._start_date = start_date
        self._dag_run_timeout = dag_run_timeout
        self._doc_md = doc_md
        self._default_view = default_view

    @classmethod
    def from_dict(cls, dikt) -> 'DAGDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DAGDetail of this DAGDetail.  # noqa: E501
        :rtype: DAGDetail
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dag_id(self):
        """Gets the dag_id of this DAGDetail.


        :return: The dag_id of this DAGDetail.
        :rtype: str
        """
        return self._dag_id

    @dag_id.setter
    def dag_id(self, dag_id):
        """Sets the dag_id of this DAGDetail.


        :param dag_id: The dag_id of this DAGDetail.
        :type dag_id: str
        """

        self._dag_id = dag_id

    @property
    def root_dag_id(self):
        """Gets the root_dag_id of this DAGDetail.


        :return: The root_dag_id of this DAGDetail.
        :rtype: str
        """
        return self._root_dag_id

    @root_dag_id.setter
    def root_dag_id(self, root_dag_id):
        """Sets the root_dag_id of this DAGDetail.


        :param root_dag_id: The root_dag_id of this DAGDetail.
        :type root_dag_id: str
        """

        self._root_dag_id = root_dag_id

    @property
    def is_paused(self):
        """Gets the is_paused of this DAGDetail.


        :return: The is_paused of this DAGDetail.
        :rtype: bool
        """
        return self._is_paused

    @is_paused.setter
    def is_paused(self, is_paused):
        """Sets the is_paused of this DAGDetail.


        :param is_paused: The is_paused of this DAGDetail.
        :type is_paused: bool
        """

        self._is_paused = is_paused

    @property
    def is_subdag(self):
        """Gets the is_subdag of this DAGDetail.


        :return: The is_subdag of this DAGDetail.
        :rtype: bool
        """
        return self._is_subdag

    @is_subdag.setter
    def is_subdag(self, is_subdag):
        """Sets the is_subdag of this DAGDetail.


        :param is_subdag: The is_subdag of this DAGDetail.
        :type is_subdag: bool
        """

        self._is_subdag = is_subdag

    @property
    def fileloc(self):
        """Gets the fileloc of this DAGDetail.


        :return: The fileloc of this DAGDetail.
        :rtype: str
        """
        return self._fileloc

    @fileloc.setter
    def fileloc(self, fileloc):
        """Sets the fileloc of this DAGDetail.


        :param fileloc: The fileloc of this DAGDetail.
        :type fileloc: str
        """

        self._fileloc = fileloc

    @property
    def file_token(self):
        """Gets the file_token of this DAGDetail.

        The key containing the encrypted path to the file. Encryption and decryption take place only on the server. This prevents the client from reading an non-DAG file. This also ensures API extensibility, because the format of encrypted data may change.   # noqa: E501

        :return: The file_token of this DAGDetail.
        :rtype: str
        """
        return self._file_token

    @file_token.setter
    def file_token(self, file_token):
        """Sets the file_token of this DAGDetail.

        The key containing the encrypted path to the file. Encryption and decryption take place only on the server. This prevents the client from reading an non-DAG file. This also ensures API extensibility, because the format of encrypted data may change.   # noqa: E501

        :param file_token: The file_token of this DAGDetail.
        :type file_token: str
        """

        self._file_token = file_token

    @property
    def owners(self):
        """Gets the owners of this DAGDetail.


        :return: The owners of this DAGDetail.
        :rtype: List[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this DAGDetail.


        :param owners: The owners of this DAGDetail.
        :type owners: List[str]
        """

        self._owners = owners

    @property
    def description(self):
        """Gets the description of this DAGDetail.


        :return: The description of this DAGDetail.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DAGDetail.


        :param description: The description of this DAGDetail.
        :type description: str
        """

        self._description = description

    @property
    def schedule_interval(self):
        """Gets the schedule_interval of this DAGDetail.


        :return: The schedule_interval of this DAGDetail.
        :rtype: OneOfScheduleInterval
        """
        return self._schedule_interval

    @schedule_interval.setter
    def schedule_interval(self, schedule_interval):
        """Sets the schedule_interval of this DAGDetail.


        :param schedule_interval: The schedule_interval of this DAGDetail.
        :type schedule_interval: OneOfScheduleInterval
        """

        self._schedule_interval = schedule_interval

    @property
    def tags(self):
        """Gets the tags of this DAGDetail.


        :return: The tags of this DAGDetail.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DAGDetail.


        :param tags: The tags of this DAGDetail.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def timezone(self):
        """Gets the timezone of this DAGDetail.


        :return: The timezone of this DAGDetail.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this DAGDetail.


        :param timezone: The timezone of this DAGDetail.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def catchup(self):
        """Gets the catchup of this DAGDetail.


        :return: The catchup of this DAGDetail.
        :rtype: bool
        """
        return self._catchup

    @catchup.setter
    def catchup(self, catchup):
        """Sets the catchup of this DAGDetail.


        :param catchup: The catchup of this DAGDetail.
        :type catchup: bool
        """

        self._catchup = catchup

    @property
    def orientation(self):
        """Gets the orientation of this DAGDetail.


        :return: The orientation of this DAGDetail.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this DAGDetail.


        :param orientation: The orientation of this DAGDetail.
        :type orientation: str
        """

        self._orientation = orientation

    @property
    def concurrency(self):
        """Gets the concurrency of this DAGDetail.


        :return: The concurrency of this DAGDetail.
        :rtype: float
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency):
        """Sets the concurrency of this DAGDetail.


        :param concurrency: The concurrency of this DAGDetail.
        :type concurrency: float
        """

        self._concurrency = concurrency

    @property
    def start_date(self):
        """Gets the start_date of this DAGDetail.


        :return: The start_date of this DAGDetail.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DAGDetail.


        :param start_date: The start_date of this DAGDetail.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def dag_run_timeout(self):
        """Gets the dag_run_timeout of this DAGDetail.


        :return: The dag_run_timeout of this DAGDetail.
        :rtype: TimeDelta
        """
        return self._dag_run_timeout

    @dag_run_timeout.setter
    def dag_run_timeout(self, dag_run_timeout):
        """Sets the dag_run_timeout of this DAGDetail.


        :param dag_run_timeout: The dag_run_timeout of this DAGDetail.
        :type dag_run_timeout: TimeDelta
        """

        self._dag_run_timeout = dag_run_timeout

    @property
    def doc_md(self):
        """Gets the doc_md of this DAGDetail.


        :return: The doc_md of this DAGDetail.
        :rtype: str
        """
        return self._doc_md

    @doc_md.setter
    def doc_md(self, doc_md):
        """Sets the doc_md of this DAGDetail.


        :param doc_md: The doc_md of this DAGDetail.
        :type doc_md: str
        """

        self._doc_md = doc_md

    @property
    def default_view(self):
        """Gets the default_view of this DAGDetail.


        :return: The default_view of this DAGDetail.
        :rtype: str
        """
        return self._default_view

    @default_view.setter
    def default_view(self, default_view):
        """Sets the default_view of this DAGDetail.


        :param default_view: The default_view of this DAGDetail.
        :type default_view: str
        """

        self._default_view = default_view

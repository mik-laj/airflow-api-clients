# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.sla_miss import SLAMiss
from openapi_server.models.task_state import TaskState
from openapi_server import util

from openapi_server.models.sla_miss import SLAMiss  # noqa: E501
from openapi_server.models.task_state import TaskState  # noqa: E501

class TaskInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_id=None, dag_id=None, execution_date=None, start_date=None, end_date=None, duration=None, state=None, try_number=None, max_tries=None, hostname=None, unixname=None, pool=None, pool_slots=None, queue=None, priority_weight=None, operator=None, queued_when=None, pid=None, executor_config=None, sla_miss=None):  # noqa: E501
        """TaskInstance - a model defined in OpenAPI

        :param task_id: The task_id of this TaskInstance.  # noqa: E501
        :type task_id: str
        :param dag_id: The dag_id of this TaskInstance.  # noqa: E501
        :type dag_id: str
        :param execution_date: The execution_date of this TaskInstance.  # noqa: E501
        :type execution_date: str
        :param start_date: The start_date of this TaskInstance.  # noqa: E501
        :type start_date: str
        :param end_date: The end_date of this TaskInstance.  # noqa: E501
        :type end_date: str
        :param duration: The duration of this TaskInstance.  # noqa: E501
        :type duration: float
        :param state: The state of this TaskInstance.  # noqa: E501
        :type state: TaskState
        :param try_number: The try_number of this TaskInstance.  # noqa: E501
        :type try_number: int
        :param max_tries: The max_tries of this TaskInstance.  # noqa: E501
        :type max_tries: int
        :param hostname: The hostname of this TaskInstance.  # noqa: E501
        :type hostname: str
        :param unixname: The unixname of this TaskInstance.  # noqa: E501
        :type unixname: str
        :param pool: The pool of this TaskInstance.  # noqa: E501
        :type pool: str
        :param pool_slots: The pool_slots of this TaskInstance.  # noqa: E501
        :type pool_slots: int
        :param queue: The queue of this TaskInstance.  # noqa: E501
        :type queue: str
        :param priority_weight: The priority_weight of this TaskInstance.  # noqa: E501
        :type priority_weight: int
        :param operator: The operator of this TaskInstance.  # noqa: E501
        :type operator: str
        :param queued_when: The queued_when of this TaskInstance.  # noqa: E501
        :type queued_when: str
        :param pid: The pid of this TaskInstance.  # noqa: E501
        :type pid: int
        :param executor_config: The executor_config of this TaskInstance.  # noqa: E501
        :type executor_config: str
        :param sla_miss: The sla_miss of this TaskInstance.  # noqa: E501
        :type sla_miss: SLAMiss
        """
        self.openapi_types = {
            'task_id': str,
            'dag_id': str,
            'execution_date': str,
            'start_date': str,
            'end_date': str,
            'duration': float,
            'state': TaskState,
            'try_number': int,
            'max_tries': int,
            'hostname': str,
            'unixname': str,
            'pool': str,
            'pool_slots': int,
            'queue': str,
            'priority_weight': int,
            'operator': str,
            'queued_when': str,
            'pid': int,
            'executor_config': str,
            'sla_miss': SLAMiss
        }

        self.attribute_map = {
            'task_id': 'task_id',
            'dag_id': 'dag_id',
            'execution_date': 'execution_date',
            'start_date': 'start_date',
            'end_date': 'end_date',
            'duration': 'duration',
            'state': 'state',
            'try_number': 'try_number',
            'max_tries': 'max_tries',
            'hostname': 'hostname',
            'unixname': 'unixname',
            'pool': 'pool',
            'pool_slots': 'pool_slots',
            'queue': 'queue',
            'priority_weight': 'priority_weight',
            'operator': 'operator',
            'queued_when': 'queued_when',
            'pid': 'pid',
            'executor_config': 'executor_config',
            'sla_miss': 'sla_miss'
        }

        self._task_id = task_id
        self._dag_id = dag_id
        self._execution_date = execution_date
        self._start_date = start_date
        self._end_date = end_date
        self._duration = duration
        self._state = state
        self._try_number = try_number
        self._max_tries = max_tries
        self._hostname = hostname
        self._unixname = unixname
        self._pool = pool
        self._pool_slots = pool_slots
        self._queue = queue
        self._priority_weight = priority_weight
        self._operator = operator
        self._queued_when = queued_when
        self._pid = pid
        self._executor_config = executor_config
        self._sla_miss = sla_miss

    @classmethod
    def from_dict(cls, dikt) -> 'TaskInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaskInstance of this TaskInstance.  # noqa: E501
        :rtype: TaskInstance
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_id(self):
        """Gets the task_id of this TaskInstance.


        :return: The task_id of this TaskInstance.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskInstance.


        :param task_id: The task_id of this TaskInstance.
        :type task_id: str
        """

        self._task_id = task_id

    @property
    def dag_id(self):
        """Gets the dag_id of this TaskInstance.


        :return: The dag_id of this TaskInstance.
        :rtype: str
        """
        return self._dag_id

    @dag_id.setter
    def dag_id(self, dag_id):
        """Sets the dag_id of this TaskInstance.


        :param dag_id: The dag_id of this TaskInstance.
        :type dag_id: str
        """

        self._dag_id = dag_id

    @property
    def execution_date(self):
        """Gets the execution_date of this TaskInstance.


        :return: The execution_date of this TaskInstance.
        :rtype: str
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date):
        """Sets the execution_date of this TaskInstance.


        :param execution_date: The execution_date of this TaskInstance.
        :type execution_date: str
        """

        self._execution_date = execution_date

    @property
    def start_date(self):
        """Gets the start_date of this TaskInstance.


        :return: The start_date of this TaskInstance.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TaskInstance.


        :param start_date: The start_date of this TaskInstance.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this TaskInstance.


        :return: The end_date of this TaskInstance.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TaskInstance.


        :param end_date: The end_date of this TaskInstance.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def duration(self):
        """Gets the duration of this TaskInstance.


        :return: The duration of this TaskInstance.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TaskInstance.


        :param duration: The duration of this TaskInstance.
        :type duration: float
        """

        self._duration = duration

    @property
    def state(self):
        """Gets the state of this TaskInstance.


        :return: The state of this TaskInstance.
        :rtype: TaskState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TaskInstance.


        :param state: The state of this TaskInstance.
        :type state: TaskState
        """

        self._state = state

    @property
    def try_number(self):
        """Gets the try_number of this TaskInstance.


        :return: The try_number of this TaskInstance.
        :rtype: int
        """
        return self._try_number

    @try_number.setter
    def try_number(self, try_number):
        """Sets the try_number of this TaskInstance.


        :param try_number: The try_number of this TaskInstance.
        :type try_number: int
        """

        self._try_number = try_number

    @property
    def max_tries(self):
        """Gets the max_tries of this TaskInstance.


        :return: The max_tries of this TaskInstance.
        :rtype: int
        """
        return self._max_tries

    @max_tries.setter
    def max_tries(self, max_tries):
        """Sets the max_tries of this TaskInstance.


        :param max_tries: The max_tries of this TaskInstance.
        :type max_tries: int
        """

        self._max_tries = max_tries

    @property
    def hostname(self):
        """Gets the hostname of this TaskInstance.


        :return: The hostname of this TaskInstance.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this TaskInstance.


        :param hostname: The hostname of this TaskInstance.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def unixname(self):
        """Gets the unixname of this TaskInstance.


        :return: The unixname of this TaskInstance.
        :rtype: str
        """
        return self._unixname

    @unixname.setter
    def unixname(self, unixname):
        """Sets the unixname of this TaskInstance.


        :param unixname: The unixname of this TaskInstance.
        :type unixname: str
        """

        self._unixname = unixname

    @property
    def pool(self):
        """Gets the pool of this TaskInstance.


        :return: The pool of this TaskInstance.
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this TaskInstance.


        :param pool: The pool of this TaskInstance.
        :type pool: str
        """

        self._pool = pool

    @property
    def pool_slots(self):
        """Gets the pool_slots of this TaskInstance.


        :return: The pool_slots of this TaskInstance.
        :rtype: int
        """
        return self._pool_slots

    @pool_slots.setter
    def pool_slots(self, pool_slots):
        """Sets the pool_slots of this TaskInstance.


        :param pool_slots: The pool_slots of this TaskInstance.
        :type pool_slots: int
        """

        self._pool_slots = pool_slots

    @property
    def queue(self):
        """Gets the queue of this TaskInstance.


        :return: The queue of this TaskInstance.
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this TaskInstance.


        :param queue: The queue of this TaskInstance.
        :type queue: str
        """

        self._queue = queue

    @property
    def priority_weight(self):
        """Gets the priority_weight of this TaskInstance.


        :return: The priority_weight of this TaskInstance.
        :rtype: int
        """
        return self._priority_weight

    @priority_weight.setter
    def priority_weight(self, priority_weight):
        """Sets the priority_weight of this TaskInstance.


        :param priority_weight: The priority_weight of this TaskInstance.
        :type priority_weight: int
        """

        self._priority_weight = priority_weight

    @property
    def operator(self):
        """Gets the operator of this TaskInstance.


        :return: The operator of this TaskInstance.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this TaskInstance.


        :param operator: The operator of this TaskInstance.
        :type operator: str
        """

        self._operator = operator

    @property
    def queued_when(self):
        """Gets the queued_when of this TaskInstance.


        :return: The queued_when of this TaskInstance.
        :rtype: str
        """
        return self._queued_when

    @queued_when.setter
    def queued_when(self, queued_when):
        """Sets the queued_when of this TaskInstance.


        :param queued_when: The queued_when of this TaskInstance.
        :type queued_when: str
        """

        self._queued_when = queued_when

    @property
    def pid(self):
        """Gets the pid of this TaskInstance.


        :return: The pid of this TaskInstance.
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this TaskInstance.


        :param pid: The pid of this TaskInstance.
        :type pid: int
        """

        self._pid = pid

    @property
    def executor_config(self):
        """Gets the executor_config of this TaskInstance.


        :return: The executor_config of this TaskInstance.
        :rtype: str
        """
        return self._executor_config

    @executor_config.setter
    def executor_config(self, executor_config):
        """Sets the executor_config of this TaskInstance.


        :param executor_config: The executor_config of this TaskInstance.
        :type executor_config: str
        """

        self._executor_config = executor_config

    @property
    def sla_miss(self):
        """Gets the sla_miss of this TaskInstance.


        :return: The sla_miss of this TaskInstance.
        :rtype: SLAMiss
        """
        return self._sla_miss

    @sla_miss.setter
    def sla_miss(self, sla_miss):
        """Sets the sla_miss of this TaskInstance.


        :param sla_miss: The sla_miss of this TaskInstance.
        :type sla_miss: SLAMiss
        """

        self._sla_miss = sla_miss

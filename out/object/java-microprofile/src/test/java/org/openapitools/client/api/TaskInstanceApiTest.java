/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.openapitools.client.api;

import java.math.BigDecimal;
import java.util.Date;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ExtraLinkCollection;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.ListTaskInstanceForm;
import org.openapitools.client.model.TaskInstance;
import org.openapitools.client.model.TaskInstanceCollection;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import org.eclipse.microprofile.rest.client.RestClientBuilder;

import java.net.URL;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;



/**
 * Airflow API (Stable) Test
 *
 * API tests for TaskInstanceApi 
 */
public class TaskInstanceApiTest {

    private TaskInstanceApi client;
    private String baseUrl = "http://localhost:9080";
    
    @Before
    public void setup() throws MalformedURLException {
        client = RestClientBuilder.newBuilder()
                        .baseUrl(new URL(baseUrl))
                        .register(ApiException.class)
                        .build(TaskInstanceApi.class);
    }

    
    /**
     * Get extra links for task instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExtraLinksTest() {
    	// TODO: test validations
        String dagId = null;
        String dagRunId = null;
        String taskId = null;
        //ExtraLinkCollection response = api.getExtraLinks(dagId, dagRunId, taskId);
        //assertNotNull(response);
        
        
    }
    
    /**
     * Get logs for a task instance
     *
     * Get logs for a specific task instance and its try number
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogsTest() {
    	// TODO: test validations
        String dagId = null;
        String dagRunId = null;
        String taskId = null;
        Integer taskTryNumber = null;
        Boolean fullContent = null;
        String token = null;
        //InlineResponse200 response = api.getLogs(dagId, dagRunId, taskId, taskTryNumber, fullContent, token);
        //assertNotNull(response);
        
        
    }
    
    /**
     * Get a task instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskInstanceTest() {
    	// TODO: test validations
        String dagId = null;
        String dagRunId = null;
        String taskId = null;
        //TaskInstance response = api.getTaskInstance(dagId, dagRunId, taskId);
        //assertNotNull(response);
        
        
    }
    
    /**
     * Get a list of task instance of DAG.
     *
     * This endpoint allows specifying &#x60;~&#x60; as the dag_id, dag_run_id to retrieve DAG Runs for all DAGs and DAG Runs. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskInstancesTest() {
    	// TODO: test validations
        String dagId = null;
        String dagRunId = null;
        Date executionDateGte = null;
        Date executionDateLte = null;
        Date startDateGte = null;
        Date startDateLte = null;
        Date endDateGte = null;
        Date endDateLte = null;
        BigDecimal durationGte = null;
        BigDecimal durationLte = null;
        List<String> state = null;
        List<String> pool = null;
        List<String> queue = null;
        Integer limit = null;
        Integer offset = null;
        //TaskInstanceCollection response = api.getTaskInstances(dagId, dagRunId, executionDateGte, executionDateLte, startDateGte, startDateLte, endDateGte, endDateLte, durationGte, durationLte, state, pool, queue, limit, offset);
        //assertNotNull(response);
        
        
    }
    
    /**
     * Get list of task instances from all DAGs and DAG Runs.
     *
     * This endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL lengthlimits 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskInstancesBatchTest() {
    	// TODO: test validations
        ListTaskInstanceForm listTaskInstanceForm = null;
        //TaskInstanceCollection response = api.getTaskInstancesBatch(listTaskInstanceForm);
        //assertNotNull(response);
        
        
    }
    
}

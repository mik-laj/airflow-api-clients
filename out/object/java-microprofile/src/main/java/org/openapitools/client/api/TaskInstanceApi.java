/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.openapitools.client.api;

import java.math.BigDecimal;
import java.util.Date;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ExtraLinkCollection;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.ListTaskInstanceForm;
import org.openapitools.client.model.TaskInstance;
import org.openapitools.client.model.TaskInstanceCollection;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;
import org.apache.cxf.jaxrs.ext.multipart.*;

import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

/**
 * Airflow API (Stable)
 *
 * <p>Apache Airflow management API.
 *
 */

@RegisterRestClient
@RegisterProvider(ApiExceptionMapper.class)
@Path("/")
public interface TaskInstanceApi  {

    /**
     * Get extra links for task instance
     *
     */
    @GET
    @Path("/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/links")
    @Produces({ "application/json" })
    public ExtraLinkCollection getExtraLinks(@PathParam("dag_id") String dagId, @PathParam("dag_run_id") String dagRunId, @PathParam("task_id") String taskId) throws ApiException, ProcessingException;

    /**
     * Get logs for a task instance
     *
     * Get logs for a specific task instance and its try number
     *
     */
    @GET
    @Path("/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/logs/{task_try_number}")
    @Produces({ "application/json", "text/plain" })
    public InlineResponse200 getLogs(@PathParam("dag_id") String dagId, @PathParam("dag_run_id") String dagRunId, @PathParam("task_id") String taskId, @PathParam("task_try_number") Integer taskTryNumber, @QueryParam("full_content") Boolean fullContent, @QueryParam("token") String token) throws ApiException, ProcessingException;

    /**
     * Get a task instance
     *
     */
    @GET
    @Path("/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}")
    @Produces({ "application/json" })
    public TaskInstance getTaskInstance(@PathParam("dag_id") String dagId, @PathParam("dag_run_id") String dagRunId, @PathParam("task_id") String taskId) throws ApiException, ProcessingException;

    /**
     * Get a list of task instance of DAG.
     *
     * This endpoint allows specifying &#x60;~&#x60; as the dag_id, dag_run_id to retrieve DAG Runs for all DAGs and DAG Runs. 
     *
     */
    @GET
    @Path("/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances")
    @Produces({ "application/json" })
    public TaskInstanceCollection getTaskInstances(@PathParam("dag_id") String dagId, @PathParam("dag_run_id") String dagRunId, @QueryParam("execution_date_gte") Date executionDateGte, @QueryParam("execution_date_lte") Date executionDateLte, @QueryParam("start_date_gte") Date startDateGte, @QueryParam("start_date_lte") Date startDateLte, @QueryParam("end_date_gte") Date endDateGte, @QueryParam("end_date_lte") Date endDateLte, @QueryParam("duration_gte") BigDecimal durationGte, @QueryParam("duration_lte") BigDecimal durationLte, @QueryParam("state") List<String> state, @QueryParam("pool") List<String> pool, @QueryParam("Queue") List<String> queue, @QueryParam("limit") @DefaultValue("100") Integer limit, @QueryParam("offset") Integer offset) throws ApiException, ProcessingException;

    /**
     * Get list of task instances from all DAGs and DAG Runs.
     *
     * This endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL lengthlimits 
     *
     */
    @POST
    @Path("/dags/~/dagRuns/~/taskInstances/list")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public TaskInstanceCollection getTaskInstancesBatch(ListTaskInstanceForm listTaskInstanceForm) throws ApiException, ProcessingException;
}


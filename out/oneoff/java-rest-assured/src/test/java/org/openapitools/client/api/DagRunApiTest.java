/*
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.DAGRun;
import org.openapitools.client.model.DAGRunCollection;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ListDagRunsForm;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.ApiClient;
import org.openapitools.client.api.DagRunApi;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.junit.Before;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;
import static org.openapitools.client.GsonObjectMapper.gson;

/**
 * API tests for DagRunApi
 */
@Ignore
public class DagRunApiTest {

    private DagRunApi api;

    @Before
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder()
                        .setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("http://localhost/api/v1"))).dagRun();
    }

    /**
     * Successful response.
     */
    @Test
    public void shouldSee200AfterCreateDagRun() {
        String dagId = null;
        String dagRunId = null;
        DAGRun daGRun = null;
        api.createDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId)
                .body(daGRun).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client specified an invalid argument.
     */
    @Test
    public void shouldSee400AfterCreateDagRun() {
        String dagId = null;
        String dagRunId = null;
        DAGRun daGRun = null;
        api.createDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId)
                .body(daGRun).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterCreateDagRun() {
        String dagId = null;
        String dagRunId = null;
        DAGRun daGRun = null;
        api.createDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId)
                .body(daGRun).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * The resource that a client tried to create already exists.
     */
    @Test
    public void shouldSee409AfterCreateDagRun() {
        String dagId = null;
        String dagRunId = null;
        DAGRun daGRun = null;
        api.createDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId)
                .body(daGRun).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterCreateDagRun() {
        String dagId = null;
        String dagRunId = null;
        DAGRun daGRun = null;
        api.createDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId)
                .body(daGRun).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * No content.
     */
    @Test
    public void shouldSee204AfterDeleteDagRun() {
        String dagId = null;
        String dagRunId = null;
        api.deleteDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client specified an invalid argument.
     */
    @Test
    public void shouldSee400AfterDeleteDagRun() {
        String dagId = null;
        String dagRunId = null;
        api.deleteDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterDeleteDagRun() {
        String dagId = null;
        String dagRunId = null;
        api.deleteDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterDeleteDagRun() {
        String dagId = null;
        String dagRunId = null;
        api.deleteDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful response.
     */
    @Test
    public void shouldSee200AfterGetDagRun() {
        String dagId = null;
        String dagRunId = null;
        api.getDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterGetDagRun() {
        String dagId = null;
        String dagRunId = null;
        api.getDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterGetDagRun() {
        String dagId = null;
        String dagRunId = null;
        api.getDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A specified resource is not found.
     */
    @Test
    public void shouldSee404AfterGetDagRun() {
        String dagId = null;
        String dagRunId = null;
        api.getDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * List of DAG Runs.
     */
    @Test
    public void shouldSee200AfterGetDagRuns() {
        String dagId = null;
        Integer limit = null;
        Integer offset = null;
        OffsetDateTime executionDateGte = null;
        OffsetDateTime executionDateLte = null;
        OffsetDateTime startDateGte = null;
        OffsetDateTime startDateLte = null;
        OffsetDateTime endDateGte = null;
        OffsetDateTime endDateLte = null;
        api.getDagRuns()
                .dagIdPath(dagId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterGetDagRuns() {
        String dagId = null;
        Integer limit = null;
        Integer offset = null;
        OffsetDateTime executionDateGte = null;
        OffsetDateTime executionDateLte = null;
        OffsetDateTime startDateGte = null;
        OffsetDateTime startDateLte = null;
        OffsetDateTime endDateGte = null;
        OffsetDateTime endDateLte = null;
        api.getDagRuns()
                .dagIdPath(dagId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * List of DAG Runs.
     */
    @Test
    public void shouldSee200AfterGetDagRunsBatch() {
        ListDagRunsForm listDagRunsForm = null;
        api.getDagRunsBatch()
                .body(listDagRunsForm).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client specified an invalid argument.
     */
    @Test
    public void shouldSee400AfterGetDagRunsBatch() {
        ListDagRunsForm listDagRunsForm = null;
        api.getDagRunsBatch()
                .body(listDagRunsForm).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterGetDagRunsBatch() {
        ListDagRunsForm listDagRunsForm = null;
        api.getDagRunsBatch()
                .body(listDagRunsForm).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterGetDagRunsBatch() {
        ListDagRunsForm listDagRunsForm = null;
        api.getDagRunsBatch()
                .body(listDagRunsForm).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful response.
     */
    @Test
    public void shouldSee200AfterUpdateDagRun() {
        String dagId = null;
        String dagRunId = null;
        DAGRun daGRun = null;
        List<String> updateMask = null;
        api.updateDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId)
                .body(daGRun).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client specified an invalid argument.
     */
    @Test
    public void shouldSee400AfterUpdateDagRun() {
        String dagId = null;
        String dagRunId = null;
        DAGRun daGRun = null;
        List<String> updateMask = null;
        api.updateDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId)
                .body(daGRun).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterUpdateDagRun() {
        String dagId = null;
        String dagRunId = null;
        DAGRun daGRun = null;
        List<String> updateMask = null;
        api.updateDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId)
                .body(daGRun).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterUpdateDagRun() {
        String dagId = null;
        String dagRunId = null;
        DAGRun daGRun = null;
        List<String> updateMask = null;
        api.updateDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId)
                .body(daGRun).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A specified resource is not found.
     */
    @Test
    public void shouldSee404AfterUpdateDagRun() {
        String dagId = null;
        String dagRunId = null;
        DAGRun daGRun = null;
        List<String> updateMask = null;
        api.updateDagRun()
                .dagIdPath(dagId)
                .dagRunIdPath(dagRunId)
                .body(daGRun).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

}
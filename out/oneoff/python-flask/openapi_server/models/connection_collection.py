# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.connection_collection_item import ConnectionCollectionItem
from openapi_server import util

from openapi_server.models.connection_collection_item import ConnectionCollectionItem  # noqa: E501

class ConnectionCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connections=None):  # noqa: E501
        """ConnectionCollection - a model defined in OpenAPI

        :param connections: The connections of this ConnectionCollection.  # noqa: E501
        :type connections: List[ConnectionCollectionItem]
        """
        self.openapi_types = {
            'connections': List[ConnectionCollectionItem]
        }

        self.attribute_map = {
            'connections': 'connections'
        }

        self._connections = connections

    @classmethod
    def from_dict(cls, dikt) -> 'ConnectionCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConnectionCollection of this ConnectionCollection.  # noqa: E501
        :rtype: ConnectionCollection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connections(self):
        """Gets the connections of this ConnectionCollection.


        :return: The connections of this ConnectionCollection.
        :rtype: List[ConnectionCollectionItem]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this ConnectionCollection.


        :param connections: The connections of this ConnectionCollection.
        :type connections: List[ConnectionCollectionItem]
        """

        self._connections = connections

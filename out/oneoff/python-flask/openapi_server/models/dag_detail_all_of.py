# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.time_delta import TimeDelta
from openapi_server import util

from openapi_server.models.time_delta import TimeDelta  # noqa: E501

class DAGDetailAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timezone=None, catchup=None, orientation=None, concurrency=None, start_date=None, dag_run_timeout=None, doc_md=None, default_view=None):  # noqa: E501
        """DAGDetailAllOf - a model defined in OpenAPI

        :param timezone: The timezone of this DAGDetailAllOf.  # noqa: E501
        :type timezone: str
        :param catchup: The catchup of this DAGDetailAllOf.  # noqa: E501
        :type catchup: bool
        :param orientation: The orientation of this DAGDetailAllOf.  # noqa: E501
        :type orientation: str
        :param concurrency: The concurrency of this DAGDetailAllOf.  # noqa: E501
        :type concurrency: float
        :param start_date: The start_date of this DAGDetailAllOf.  # noqa: E501
        :type start_date: datetime
        :param dag_run_timeout: The dag_run_timeout of this DAGDetailAllOf.  # noqa: E501
        :type dag_run_timeout: TimeDelta
        :param doc_md: The doc_md of this DAGDetailAllOf.  # noqa: E501
        :type doc_md: str
        :param default_view: The default_view of this DAGDetailAllOf.  # noqa: E501
        :type default_view: str
        """
        self.openapi_types = {
            'timezone': str,
            'catchup': bool,
            'orientation': str,
            'concurrency': float,
            'start_date': datetime,
            'dag_run_timeout': TimeDelta,
            'doc_md': str,
            'default_view': str
        }

        self.attribute_map = {
            'timezone': 'timezone',
            'catchup': 'catchup',
            'orientation': 'orientation',
            'concurrency': 'concurrency',
            'start_date': 'start_date',
            'dag_run_timeout': 'dag_run_timeout',
            'doc_md': 'doc_md',
            'default_view': 'default_view'
        }

        self._timezone = timezone
        self._catchup = catchup
        self._orientation = orientation
        self._concurrency = concurrency
        self._start_date = start_date
        self._dag_run_timeout = dag_run_timeout
        self._doc_md = doc_md
        self._default_view = default_view

    @classmethod
    def from_dict(cls, dikt) -> 'DAGDetailAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DAGDetail_allOf of this DAGDetailAllOf.  # noqa: E501
        :rtype: DAGDetailAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timezone(self):
        """Gets the timezone of this DAGDetailAllOf.


        :return: The timezone of this DAGDetailAllOf.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this DAGDetailAllOf.


        :param timezone: The timezone of this DAGDetailAllOf.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def catchup(self):
        """Gets the catchup of this DAGDetailAllOf.


        :return: The catchup of this DAGDetailAllOf.
        :rtype: bool
        """
        return self._catchup

    @catchup.setter
    def catchup(self, catchup):
        """Sets the catchup of this DAGDetailAllOf.


        :param catchup: The catchup of this DAGDetailAllOf.
        :type catchup: bool
        """

        self._catchup = catchup

    @property
    def orientation(self):
        """Gets the orientation of this DAGDetailAllOf.


        :return: The orientation of this DAGDetailAllOf.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this DAGDetailAllOf.


        :param orientation: The orientation of this DAGDetailAllOf.
        :type orientation: str
        """

        self._orientation = orientation

    @property
    def concurrency(self):
        """Gets the concurrency of this DAGDetailAllOf.


        :return: The concurrency of this DAGDetailAllOf.
        :rtype: float
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency):
        """Sets the concurrency of this DAGDetailAllOf.


        :param concurrency: The concurrency of this DAGDetailAllOf.
        :type concurrency: float
        """

        self._concurrency = concurrency

    @property
    def start_date(self):
        """Gets the start_date of this DAGDetailAllOf.


        :return: The start_date of this DAGDetailAllOf.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DAGDetailAllOf.


        :param start_date: The start_date of this DAGDetailAllOf.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def dag_run_timeout(self):
        """Gets the dag_run_timeout of this DAGDetailAllOf.


        :return: The dag_run_timeout of this DAGDetailAllOf.
        :rtype: TimeDelta
        """
        return self._dag_run_timeout

    @dag_run_timeout.setter
    def dag_run_timeout(self, dag_run_timeout):
        """Sets the dag_run_timeout of this DAGDetailAllOf.


        :param dag_run_timeout: The dag_run_timeout of this DAGDetailAllOf.
        :type dag_run_timeout: TimeDelta
        """

        self._dag_run_timeout = dag_run_timeout

    @property
    def doc_md(self):
        """Gets the doc_md of this DAGDetailAllOf.


        :return: The doc_md of this DAGDetailAllOf.
        :rtype: str
        """
        return self._doc_md

    @doc_md.setter
    def doc_md(self, doc_md):
        """Sets the doc_md of this DAGDetailAllOf.


        :param doc_md: The doc_md of this DAGDetailAllOf.
        :type doc_md: str
        """

        self._doc_md = doc_md

    @property
    def default_view(self):
        """Gets the default_view of this DAGDetailAllOf.


        :return: The default_view of this DAGDetailAllOf.
        :rtype: str
        """
        return self._default_view

    @default_view.setter
    def default_view(self, default_view):
        """Sets the default_view of this DAGDetailAllOf.


        :param default_view: The default_view of this DAGDetailAllOf.
        :type default_view: str
        """

        self._default_view = default_view

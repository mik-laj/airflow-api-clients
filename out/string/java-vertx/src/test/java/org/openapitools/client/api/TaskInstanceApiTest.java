/*
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ExtraLinkCollection;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.ListTaskInstanceForm;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.TaskInstance;
import org.openapitools.client.model.TaskInstanceCollection;

import org.openapitools.client.Configuration;

import org.junit.Test;
import org.junit.Ignore;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.runner.RunWith;

import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonObject;
import io.vertx.core.Vertx;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import io.vertx.ext.unit.junit.RunTestOnContext;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.Async;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskInstanceApi
 */
@RunWith(VertxUnitRunner.class)
@Ignore
public class TaskInstanceApiTest {

    private TaskInstanceApi api;

    @Rule
    public RunTestOnContext rule = new RunTestOnContext();

    @BeforeClass
    public void setupApiClient() {
        JsonObject config = new JsonObject();
        Vertx vertx = rule.vertx();
        Configuration.setupDefaultApiClient(vertx, config);

        api = new TaskInstanceApiImpl();
    }
    
    /**
     * Get extra links for task instance
     * 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getExtraLinksTest(TestContext context) {
        Async async = context.async();
        String dagId = null;
        String dagRunId = null;
        String taskId = null;
        api.getExtraLinks(dagId, dagRunId, taskId, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * Get logs for a task instance
     * Get logs for a specific task instance and its try number
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getLogsTest(TestContext context) {
        Async async = context.async();
        String dagId = null;
        String dagRunId = null;
        String taskId = null;
        Integer taskTryNumber = null;
        Boolean fullContent = null;
        String token = null;
        api.getLogs(dagId, dagRunId, taskId, taskTryNumber, fullContent, token, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * Get a task instance
     * 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getTaskInstanceTest(TestContext context) {
        Async async = context.async();
        String dagId = null;
        String dagRunId = null;
        String taskId = null;
        api.getTaskInstance(dagId, dagRunId, taskId, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * Get a list of task instance of DAG.
     * This endpoint allows specifying &#x60;~&#x60; as the dag_id, dag_run_id to retrieve DAG Runs for all DAGs and DAG Runs. 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getTaskInstancesTest(TestContext context) {
        Async async = context.async();
        String dagId = null;
        String dagRunId = null;
        OffsetDateTime executionDateGte = null;
        OffsetDateTime executionDateLte = null;
        OffsetDateTime startDateGte = null;
        OffsetDateTime startDateLte = null;
        OffsetDateTime endDateGte = null;
        OffsetDateTime endDateLte = null;
        BigDecimal durationGte = null;
        BigDecimal durationLte = null;
        List<String> state = null;
        List<String> pool = null;
        List<String> queue = null;
        Integer limit = null;
        Integer offset = null;
        api.getTaskInstances(dagId, dagRunId, executionDateGte, executionDateLte, startDateGte, startDateLte, endDateGte, endDateLte, durationGte, durationLte, state, pool, queue, limit, offset, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * Get list of task instances from all DAGs and DAG Runs.
     * This endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL lengthlimits 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getTaskInstancesBatchTest(TestContext context) {
        Async async = context.async();
        ListTaskInstanceForm listTaskInstanceForm = null;
        api.getTaskInstancesBatch(listTaskInstanceForm, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
}

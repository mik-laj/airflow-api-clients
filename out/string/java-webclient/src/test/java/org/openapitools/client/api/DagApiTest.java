/*
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.ClearTaskInstance;
import org.openapitools.client.model.DAG;
import org.openapitools.client.model.DAGCollection;
import org.openapitools.client.model.DAGDetail;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.Task;
import org.openapitools.client.model.TaskCollection;
import org.openapitools.client.model.TaskInstanceReferenceCollection;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DagApi
 */
@Ignore
public class DagApiTest {

    private final DagApi api = new DagApi();

    
    /**
     * Clears a set of task instances associated with the DAG for a specified date range.
     *
     * 
     */
    @Test
    public void clearTaskInstanceTest()  {
        String dagId = null;
        ClearTaskInstance clearTaskInstance = null;
        TaskInstanceReferenceCollection response = api.clearTaskInstance(dagId, clearTaskInstance).block();

        // TODO: test validations
    }
    
    /**
     * Get basic information about a DAG
     *
     * Presents only information available in database (DAGModel). If you need detailed information, consider using GET /dags/{dag_id}/detail. 
     */
    @Test
    public void getDagTest()  {
        String dagId = null;
        DAG response = api.getDag(dagId).block();

        // TODO: test validations
    }
    
    /**
     * Get a simplified representation of DAG.
     *
     * The response contains many DAG attributes, so the response can be large. If possible, consider using GET /dags/{dag_id}. 
     */
    @Test
    public void getDagDetailTest()  {
        String dagId = null;
        DAGDetail response = api.getDagDetail(dagId).block();

        // TODO: test validations
    }
    
    /**
     * Get source code using file token
     *
     * 
     */
    @Test
    public void getDagSourceTest()  {
        String fileToken = null;
        InlineResponse2001 response = api.getDagSource(fileToken).block();

        // TODO: test validations
    }
    
    /**
     * Get all DAGs
     *
     * 
     */
    @Test
    public void getDagsTest()  {
        Integer limit = null;
        Integer offset = null;
        DAGCollection response = api.getDags(limit, offset).block();

        // TODO: test validations
    }
    
    /**
     * Get simplified representation of a task.
     *
     * 
     */
    @Test
    public void getTaskTest()  {
        String dagId = null;
        String taskId = null;
        Task response = api.getTask(dagId, taskId).block();

        // TODO: test validations
    }
    
    /**
     * Get tasks for DAG
     *
     * 
     */
    @Test
    public void getTasksTest()  {
        String dagId = null;
        TaskCollection response = api.getTasks(dagId).block();

        // TODO: test validations
    }
    
    /**
     * Update a DAG
     *
     * 
     */
    @Test
    public void updateDagTest()  {
        String dagId = null;
        DAG DAG = null;
        DAG response = api.updateDag(dagId, DAG).block();

        // TODO: test validations
    }
    
}

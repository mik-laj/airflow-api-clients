/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.openapitools.client.model;

import java.math.BigDecimal;
import java.util.Date;
import org.openapitools.client.model.TimeDelta;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.json.bind.annotation.JsonbProperty;

public class DAGDetailAllOf  {
  
  private String timezone;

  private Boolean catchup;

  private String orientation;

  private BigDecimal concurrency;

  private Date startDate;

  private TimeDelta dagRunTimeout;

  private String docMd;

  private String defaultView;
  
 /**
   * Get timezone
   * @return timezone
  **/
  @JsonbProperty("timezone")
  public String getTimezone() {
    return timezone;
  }

  /**
    * Set timezone
  **/
  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }

  public DAGDetailAllOf timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

 /**
   * Get catchup
   * @return catchup
  **/
  @JsonbProperty("catchup")
  public Boolean getCatchup() {
    return catchup;
  }


 /**
   * Get orientation
   * @return orientation
  **/
  @JsonbProperty("orientation")
  public String getOrientation() {
    return orientation;
  }


 /**
   * Get concurrency
   * @return concurrency
  **/
  @JsonbProperty("concurrency")
  public BigDecimal getConcurrency() {
    return concurrency;
  }


 /**
   * Get startDate
   * @return startDate
  **/
  @JsonbProperty("start_date")
  public Date getStartDate() {
    return startDate;
  }


 /**
   * Get dagRunTimeout
   * @return dagRunTimeout
  **/
  @JsonbProperty("dag_run_timeout")
  public TimeDelta getDagRunTimeout() {
    return dagRunTimeout;
  }

  /**
    * Set dagRunTimeout
  **/
  public void setDagRunTimeout(TimeDelta dagRunTimeout) {
    this.dagRunTimeout = dagRunTimeout;
  }

  public DAGDetailAllOf dagRunTimeout(TimeDelta dagRunTimeout) {
    this.dagRunTimeout = dagRunTimeout;
    return this;
  }

 /**
   * Get docMd
   * @return docMd
  **/
  @JsonbProperty("doc_md")
  public String getDocMd() {
    return docMd;
  }


 /**
   * Get defaultView
   * @return defaultView
  **/
  @JsonbProperty("default_view")
  public String getDefaultView() {
    return defaultView;
  }



  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DAGDetailAllOf {\n");
    
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    catchup: ").append(toIndentedString(catchup)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    concurrency: ").append(toIndentedString(concurrency)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    dagRunTimeout: ").append(toIndentedString(dagRunTimeout)).append("\n");
    sb.append("    docMd: ").append(toIndentedString(docMd)).append("\n");
    sb.append("    defaultView: ").append(toIndentedString(defaultView)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}


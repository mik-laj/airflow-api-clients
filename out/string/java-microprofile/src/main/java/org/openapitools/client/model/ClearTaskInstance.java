/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.openapitools.client.model;


import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.json.bind.annotation.JsonbProperty;

public class ClearTaskInstance  {
  
 /**
   * If set, don't actually run this operation. The response will contain a list of task instances planned to be cleaned, but not modified in any way. 
  **/
  private Boolean dryRun = true;

 /**
   * The minimum execution date to clear.
  **/
  private String startDate;

 /**
   * The maximum execution date to clear.
  **/
  private String endDate;

 /**
   * Only clear failed tasks.
  **/
  private String onlyFailed;

 /**
   * Only clear running tasks.
  **/
  private String onlyRunning;

 /**
   * Clear tasks in subdags and clear external tasks indicated by ExternalTaskMarker.
  **/
  private Boolean includeSubdags;

 /**
   * Clear tasks in the parent dag of the subdag.
  **/
  private Boolean includeParentdag;

 /**
   * Set state of DAG Runs to RUNNING.
  **/
  private Boolean resetDagRuns;
  
 /**
   * If set, don&#39;t actually run this operation. The response will contain a list of task instances planned to be cleaned, but not modified in any way. 
   * @return dryRun
  **/
  @JsonbProperty("dry_run")
  public Boolean getDryRun() {
    return dryRun;
  }

  /**
    * Set dryRun
  **/
  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }

  public ClearTaskInstance dryRun(Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

 /**
   * The minimum execution date to clear.
   * @return startDate
  **/
  @JsonbProperty("start_date")
  public String getStartDate() {
    return startDate;
  }

  /**
    * Set startDate
  **/
  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }

  public ClearTaskInstance startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

 /**
   * The maximum execution date to clear.
   * @return endDate
  **/
  @JsonbProperty("end_date")
  public String getEndDate() {
    return endDate;
  }

  /**
    * Set endDate
  **/
  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }

  public ClearTaskInstance endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

 /**
   * Only clear failed tasks.
   * @return onlyFailed
  **/
  @JsonbProperty("only_failed")
  public String getOnlyFailed() {
    return onlyFailed;
  }

  /**
    * Set onlyFailed
  **/
  public void setOnlyFailed(String onlyFailed) {
    this.onlyFailed = onlyFailed;
  }

  public ClearTaskInstance onlyFailed(String onlyFailed) {
    this.onlyFailed = onlyFailed;
    return this;
  }

 /**
   * Only clear running tasks.
   * @return onlyRunning
  **/
  @JsonbProperty("only_running")
  public String getOnlyRunning() {
    return onlyRunning;
  }

  /**
    * Set onlyRunning
  **/
  public void setOnlyRunning(String onlyRunning) {
    this.onlyRunning = onlyRunning;
  }

  public ClearTaskInstance onlyRunning(String onlyRunning) {
    this.onlyRunning = onlyRunning;
    return this;
  }

 /**
   * Clear tasks in subdags and clear external tasks indicated by ExternalTaskMarker.
   * @return includeSubdags
  **/
  @JsonbProperty("include_subdags")
  public Boolean getIncludeSubdags() {
    return includeSubdags;
  }

  /**
    * Set includeSubdags
  **/
  public void setIncludeSubdags(Boolean includeSubdags) {
    this.includeSubdags = includeSubdags;
  }

  public ClearTaskInstance includeSubdags(Boolean includeSubdags) {
    this.includeSubdags = includeSubdags;
    return this;
  }

 /**
   * Clear tasks in the parent dag of the subdag.
   * @return includeParentdag
  **/
  @JsonbProperty("include_parentdag")
  public Boolean getIncludeParentdag() {
    return includeParentdag;
  }

  /**
    * Set includeParentdag
  **/
  public void setIncludeParentdag(Boolean includeParentdag) {
    this.includeParentdag = includeParentdag;
  }

  public ClearTaskInstance includeParentdag(Boolean includeParentdag) {
    this.includeParentdag = includeParentdag;
    return this;
  }

 /**
   * Set state of DAG Runs to RUNNING.
   * @return resetDagRuns
  **/
  @JsonbProperty("reset_dag_runs")
  public Boolean getResetDagRuns() {
    return resetDagRuns;
  }

  /**
    * Set resetDagRuns
  **/
  public void setResetDagRuns(Boolean resetDagRuns) {
    this.resetDagRuns = resetDagRuns;
  }

  public ClearTaskInstance resetDagRuns(Boolean resetDagRuns) {
    this.resetDagRuns = resetDagRuns;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClearTaskInstance {\n");
    
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    onlyFailed: ").append(toIndentedString(onlyFailed)).append("\n");
    sb.append("    onlyRunning: ").append(toIndentedString(onlyRunning)).append("\n");
    sb.append("    includeSubdags: ").append(toIndentedString(includeSubdags)).append("\n");
    sb.append("    includeParentdag: ").append(toIndentedString(includeParentdag)).append("\n");
    sb.append("    resetDagRuns: ").append(toIndentedString(resetDagRuns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}


/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.openapitools.client.api;

import org.openapitools.client.model.Error;
import org.openapitools.client.model.Pool;
import org.openapitools.client.model.PoolCollection;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;
import org.apache.cxf.jaxrs.ext.multipart.*;

import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

/**
 * Airflow API (Stable)
 *
 * <p>Apache Airflow management API.
 *
 */

@RegisterRestClient
@RegisterProvider(ApiExceptionMapper.class)
@Path("/")
public interface PoolApi  {

    /**
     * Create a pool
     *
     */
    @POST
    @Path("/pools")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public Pool createPool(Pool pool) throws ApiException, ProcessingException;

    /**
     * Delete a pool
     *
     */
    @DELETE
    @Path("/pools/{pool_name}")
    @Produces({ "application/json" })
    public void deletePool(@PathParam("pool_name") String poolName) throws ApiException, ProcessingException;

    /**
     * Get a pool
     *
     */
    @GET
    @Path("/pools/{pool_name}")
    @Produces({ "application/json" })
    public Pool getPool(@PathParam("pool_name") String poolName) throws ApiException, ProcessingException;

    /**
     * Get all pools
     *
     */
    @GET
    @Path("/pools")
    @Produces({ "application/json" })
    public PoolCollection getPools(@QueryParam("limit") @DefaultValue("100") Integer limit, @QueryParam("offset") Integer offset) throws ApiException, ProcessingException;

    /**
     * Update a pool
     *
     */
    @PATCH
    @Path("/pools/{pool_name}")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public Pool updatePool(@PathParam("pool_name") String poolName, Pool pool, @QueryParam("update_mask") List<String> updateMask) throws ApiException, ProcessingException;
}


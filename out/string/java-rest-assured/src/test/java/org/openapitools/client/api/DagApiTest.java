/*
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.ClearTaskInstance;
import org.openapitools.client.model.DAG;
import org.openapitools.client.model.DAGCollection;
import org.openapitools.client.model.DAGDetail;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.Task;
import org.openapitools.client.model.TaskCollection;
import org.openapitools.client.model.TaskInstanceReferenceCollection;
import org.openapitools.client.ApiClient;
import org.openapitools.client.api.DagApi;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.junit.Before;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;
import static org.openapitools.client.GsonObjectMapper.gson;

/**
 * API tests for DagApi
 */
@Ignore
public class DagApiTest {

    private DagApi api;

    @Before
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder()
                        .setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("http://localhost/api/v1"))).dag();
    }

    /**
     * A list of cleared task references
     */
    @Test
    public void shouldSee200AfterClearTaskInstance() {
        String dagId = null;
        ClearTaskInstance clearTaskInstance = null;
        api.clearTaskInstance()
                .dagIdPath(dagId)
                .body(clearTaskInstance).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterClearTaskInstance() {
        String dagId = null;
        ClearTaskInstance clearTaskInstance = null;
        api.clearTaskInstance()
                .dagIdPath(dagId)
                .body(clearTaskInstance).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterClearTaskInstance() {
        String dagId = null;
        ClearTaskInstance clearTaskInstance = null;
        api.clearTaskInstance()
                .dagIdPath(dagId)
                .body(clearTaskInstance).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A specified resource is not found.
     */
    @Test
    public void shouldSee404AfterClearTaskInstance() {
        String dagId = null;
        ClearTaskInstance clearTaskInstance = null;
        api.clearTaskInstance()
                .dagIdPath(dagId)
                .body(clearTaskInstance).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful response.
     */
    @Test
    public void shouldSee200AfterGetDag() {
        String dagId = null;
        api.getDag()
                .dagIdPath(dagId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterGetDag() {
        String dagId = null;
        api.getDag()
                .dagIdPath(dagId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterGetDag() {
        String dagId = null;
        api.getDag()
                .dagIdPath(dagId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A specified resource is not found.
     */
    @Test
    public void shouldSee404AfterGetDag() {
        String dagId = null;
        api.getDag()
                .dagIdPath(dagId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful response.
     */
    @Test
    public void shouldSee200AfterGetDagDetail() {
        String dagId = null;
        api.getDagDetail()
                .dagIdPath(dagId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterGetDagDetail() {
        String dagId = null;
        api.getDagDetail()
                .dagIdPath(dagId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterGetDagDetail() {
        String dagId = null;
        api.getDagDetail()
                .dagIdPath(dagId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A specified resource is not found.
     */
    @Test
    public void shouldSee404AfterGetDagDetail() {
        String dagId = null;
        api.getDagDetail()
                .dagIdPath(dagId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful response.
     */
    @Test
    public void shouldSee200AfterGetDagSource() {
        String fileToken = null;
        api.getDagSource()
                .fileTokenPath(fileToken).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterGetDagSource() {
        String fileToken = null;
        api.getDagSource()
                .fileTokenPath(fileToken).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterGetDagSource() {
        String fileToken = null;
        api.getDagSource()
                .fileTokenPath(fileToken).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A specified resource is not found.
     */
    @Test
    public void shouldSee404AfterGetDagSource() {
        String fileToken = null;
        api.getDagSource()
                .fileTokenPath(fileToken).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * List of DAGs.
     */
    @Test
    public void shouldSee200AfterGetDags() {
        Integer limit = null;
        Integer offset = null;
        api.getDags().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterGetDags() {
        Integer limit = null;
        Integer offset = null;
        api.getDags().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful response.
     */
    @Test
    public void shouldSee200AfterGetTask() {
        String dagId = null;
        String taskId = null;
        api.getTask()
                .dagIdPath(dagId)
                .taskIdPath(taskId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterGetTask() {
        String dagId = null;
        String taskId = null;
        api.getTask()
                .dagIdPath(dagId)
                .taskIdPath(taskId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterGetTask() {
        String dagId = null;
        String taskId = null;
        api.getTask()
                .dagIdPath(dagId)
                .taskIdPath(taskId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A specified resource is not found.
     */
    @Test
    public void shouldSee404AfterGetTask() {
        String dagId = null;
        String taskId = null;
        api.getTask()
                .dagIdPath(dagId)
                .taskIdPath(taskId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful response.
     */
    @Test
    public void shouldSee200AfterGetTasks() {
        String dagId = null;
        api.getTasks()
                .dagIdPath(dagId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterGetTasks() {
        String dagId = null;
        api.getTasks()
                .dagIdPath(dagId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterGetTasks() {
        String dagId = null;
        api.getTasks()
                .dagIdPath(dagId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A specified resource is not found.
     */
    @Test
    public void shouldSee404AfterGetTasks() {
        String dagId = null;
        api.getTasks()
                .dagIdPath(dagId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful response.
     */
    @Test
    public void shouldSee200AfterUpdateDag() {
        String dagId = null;
        DAG DAG = null;
        api.updateDag()
                .dagIdPath(dagId)
                .body(DAG).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterUpdateDag() {
        String dagId = null;
        DAG DAG = null;
        api.updateDag()
                .dagIdPath(dagId)
                .body(DAG).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterUpdateDag() {
        String dagId = null;
        DAG DAG = null;
        api.updateDag()
                .dagIdPath(dagId)
                .body(DAG).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A specified resource is not found.
     */
    @Test
    public void shouldSee404AfterUpdateDag() {
        String dagId = null;
        DAG DAG = null;
        api.updateDag()
                .dagIdPath(dagId)
                .body(DAG).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

}
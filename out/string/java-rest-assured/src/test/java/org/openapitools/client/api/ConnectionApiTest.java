/*
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.Connection;
import org.openapitools.client.model.ConnectionCollection;
import org.openapitools.client.model.Error;
import org.openapitools.client.ApiClient;
import org.openapitools.client.api.ConnectionApi;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.junit.Before;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;
import static org.openapitools.client.GsonObjectMapper.gson;

/**
 * API tests for ConnectionApi
 */
@Ignore
public class ConnectionApiTest {

    private ConnectionApi api;

    @Before
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder()
                        .setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("http://localhost/api/v1"))).connection();
    }

    /**
     * Successful response.
     */
    @Test
    public void shouldSee200AfterCreateConnection() {
        Connection connection = null;
        api.createConnection()
                .body(connection).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client specified an invalid argument.
     */
    @Test
    public void shouldSee400AfterCreateConnection() {
        Connection connection = null;
        api.createConnection()
                .body(connection).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterCreateConnection() {
        Connection connection = null;
        api.createConnection()
                .body(connection).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterCreateConnection() {
        Connection connection = null;
        api.createConnection()
                .body(connection).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * No content.
     */
    @Test
    public void shouldSee204AfterDeleteConnection() {
        Integer connectionId = null;
        api.deleteConnection()
                .connectionIdPath(connectionId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client specified an invalid argument.
     */
    @Test
    public void shouldSee400AfterDeleteConnection() {
        Integer connectionId = null;
        api.deleteConnection()
                .connectionIdPath(connectionId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterDeleteConnection() {
        Integer connectionId = null;
        api.deleteConnection()
                .connectionIdPath(connectionId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterDeleteConnection() {
        Integer connectionId = null;
        api.deleteConnection()
                .connectionIdPath(connectionId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful response.
     */
    @Test
    public void shouldSee200AfterGetConnection() {
        Integer connectionId = null;
        api.getConnection()
                .connectionIdPath(connectionId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterGetConnection() {
        Integer connectionId = null;
        api.getConnection()
                .connectionIdPath(connectionId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterGetConnection() {
        Integer connectionId = null;
        api.getConnection()
                .connectionIdPath(connectionId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A specified resource is not found.
     */
    @Test
    public void shouldSee404AfterGetConnection() {
        Integer connectionId = null;
        api.getConnection()
                .connectionIdPath(connectionId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * List of connection entry.
     */
    @Test
    public void shouldSee200AfterGetConnections() {
        Integer limit = null;
        Integer offset = null;
        api.getConnections().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterGetConnections() {
        Integer limit = null;
        Integer offset = null;
        api.getConnections().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterGetConnections() {
        Integer limit = null;
        Integer offset = null;
        api.getConnections().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful response.
     */
    @Test
    public void shouldSee200AfterUpdateConnection() {
        Integer connectionId = null;
        Connection connection = null;
        List<String> updateMask = null;
        api.updateConnection()
                .connectionIdPath(connectionId)
                .body(connection).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client specified an invalid argument.
     */
    @Test
    public void shouldSee400AfterUpdateConnection() {
        Integer connectionId = null;
        Connection connection = null;
        List<String> updateMask = null;
        api.updateConnection()
                .connectionIdPath(connectionId)
                .body(connection).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Request not authenticated due to missing, invalid, authentication info.
     */
    @Test
    public void shouldSee401AfterUpdateConnection() {
        Integer connectionId = null;
        Connection connection = null;
        List<String> updateMask = null;
        api.updateConnection()
                .connectionIdPath(connectionId)
                .body(connection).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Client does not have sufficient permission.
     */
    @Test
    public void shouldSee403AfterUpdateConnection() {
        Integer connectionId = null;
        Connection connection = null;
        List<String> updateMask = null;
        api.updateConnection()
                .connectionIdPath(connectionId)
                .body(connection).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A specified resource is not found.
     */
    @Test
    public void shouldSee404AfterUpdateConnection() {
        Integer connectionId = null;
        Connection connection = null;
        List<String> updateMask = null;
        api.updateConnection()
                .connectionIdPath(connectionId)
                .body(connection).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

}
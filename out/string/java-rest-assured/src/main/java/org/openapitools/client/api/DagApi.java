/*
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.google.gson.reflect.TypeToken;
import org.openapitools.client.model.ClearTaskInstance;
import org.openapitools.client.model.DAG;
import org.openapitools.client.model.DAGCollection;
import org.openapitools.client.model.DAGDetail;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.Task;
import org.openapitools.client.model.TaskCollection;
import org.openapitools.client.model.TaskInstanceReferenceCollection;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.swagger.annotations.*;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import org.openapitools.client.JSON;
import static io.restassured.http.Method.*;

@Api(value = "Dag")
public class DagApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private DagApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static DagApi dag(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new DagApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                clearTaskInstance(),
                getDag(),
                getDagDetail(),
                getDagSource(),
                getDags(),
                getTask(),
                getTasks(),
                updateDag()
        );
    }

    @ApiOperation(value = "Clears a set of task instances associated with the DAG for a specified date range.",
            notes = "",
            nickname = "clearTaskInstance",
            tags = { "DAG" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "A list of cleared task references") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public ClearTaskInstanceOper clearTaskInstance() {
        return new ClearTaskInstanceOper(createReqSpec());
    }

    @ApiOperation(value = "Get basic information about a DAG",
            notes = "Presents only information available in database (DAGModel). If you need detailed information, consider using GET /dags/{dag_id}/detail. ",
            nickname = "getDag",
            tags = { "DAG" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public GetDagOper getDag() {
        return new GetDagOper(createReqSpec());
    }

    @ApiOperation(value = "Get a simplified representation of DAG.",
            notes = "The response contains many DAG attributes, so the response can be large. If possible, consider using GET /dags/{dag_id}. ",
            nickname = "getDagDetail",
            tags = { "DAG" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public GetDagDetailOper getDagDetail() {
        return new GetDagDetailOper(createReqSpec());
    }

    @ApiOperation(value = "Get source code using file token",
            notes = "",
            nickname = "getDagSource",
            tags = { "DAG" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public GetDagSourceOper getDagSource() {
        return new GetDagSourceOper(createReqSpec());
    }

    @ApiOperation(value = "Get all DAGs",
            notes = "",
            nickname = "getDags",
            tags = { "DAG" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "List of DAGs.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.")  })
    public GetDagsOper getDags() {
        return new GetDagsOper(createReqSpec());
    }

    @ApiOperation(value = "Get simplified representation of a task.",
            notes = "",
            nickname = "getTask",
            tags = { "DAG" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public GetTaskOper getTask() {
        return new GetTaskOper(createReqSpec());
    }

    @ApiOperation(value = "Get tasks for DAG",
            notes = "",
            nickname = "getTasks",
            tags = { "DAG" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public GetTasksOper getTasks() {
        return new GetTasksOper(createReqSpec());
    }

    @ApiOperation(value = "Update a DAG",
            notes = "",
            nickname = "updateDag",
            tags = { "DAG" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public UpdateDagOper updateDag() {
        return new UpdateDagOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public DagApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Clears a set of task instances associated with the DAG for a specified date range.
     * 
     *
     * @see #dagIdPath The DAG ID. (required)
     * @see #body Parameters of action (required)
     * return TaskInstanceReferenceCollection
     */
    public static class ClearTaskInstanceOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/dags/{dag_id}/clearTaskInstances";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ClearTaskInstanceOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /dags/{dag_id}/clearTaskInstances
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /dags/{dag_id}/clearTaskInstances
         * @param handler handler
         * @return TaskInstanceReferenceCollection
         */
        public TaskInstanceReferenceCollection executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<TaskInstanceReferenceCollection>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param clearTaskInstance (ClearTaskInstance) Parameters of action (required)
         * @return operation
         */
        public ClearTaskInstanceOper body(ClearTaskInstance clearTaskInstance) {
            reqSpec.setBody(clearTaskInstance);
            return this;
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public ClearTaskInstanceOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ClearTaskInstanceOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ClearTaskInstanceOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get basic information about a DAG
     * Presents only information available in database (DAGModel). If you need detailed information, consider using GET /dags/{dag_id}/detail. 
     *
     * @see #dagIdPath The DAG ID. (required)
     * return DAG
     */
    public static class GetDagOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/dags/{dag_id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetDagOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /dags/{dag_id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /dags/{dag_id}
         * @param handler handler
         * @return DAG
         */
        public DAG executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<DAG>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public GetDagOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetDagOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetDagOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get a simplified representation of DAG.
     * The response contains many DAG attributes, so the response can be large. If possible, consider using GET /dags/{dag_id}. 
     *
     * @see #dagIdPath The DAG ID. (required)
     * return DAGDetail
     */
    public static class GetDagDetailOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/dags/{dag_id}/details";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetDagDetailOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /dags/{dag_id}/details
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /dags/{dag_id}/details
         * @param handler handler
         * @return DAGDetail
         */
        public DAGDetail executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<DAGDetail>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public GetDagDetailOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetDagDetailOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetDagDetailOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get source code using file token
     * 
     *
     * @see #fileTokenPath The key containing the encrypted path to the file. Encryption and decryption take place only on the server. This prevents the client from reading an non-DAG file. This also ensures API extensibility, because the format of encrypted data may change.  (required)
     * return InlineResponse2001
     */
    public static class GetDagSourceOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/dagSources/{file_token}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetDagSourceOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /dagSources/{file_token}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /dagSources/{file_token}
         * @param handler handler
         * @return InlineResponse2001
         */
        public InlineResponse2001 executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<InlineResponse2001>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String FILE_TOKEN_PATH = "file_token";

        /**
         * @param fileToken (String) The key containing the encrypted path to the file. Encryption and decryption take place only on the server. This prevents the client from reading an non-DAG file. This also ensures API extensibility, because the format of encrypted data may change.  (required)
         * @return operation
         */
        public GetDagSourceOper fileTokenPath(Object fileToken) {
            reqSpec.addPathParam(FILE_TOKEN_PATH, fileToken);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetDagSourceOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetDagSourceOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get all DAGs
     * 
     *
     * @see #limitQuery The numbers of items to return. (optional, default to 100)
     * @see #offsetQuery The number of items to skip before starting to collect the result set. (optional)
     * return DAGCollection
     */
    public static class GetDagsOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/dags";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetDagsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /dags
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /dags
         * @param handler handler
         * @return DAGCollection
         */
        public DAGCollection executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<DAGCollection>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) The numbers of items to return. (optional, default to 100)
         * @return operation
         */
        public GetDagsOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) The number of items to skip before starting to collect the result set. (optional)
         * @return operation
         */
        public GetDagsOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetDagsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetDagsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get simplified representation of a task.
     * 
     *
     * @see #dagIdPath The DAG ID. (required)
     * @see #taskIdPath The Task ID. (required)
     * return Task
     */
    public static class GetTaskOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/dags/{dag_id}/tasks/{task_id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetTaskOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /dags/{dag_id}/tasks/{task_id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /dags/{dag_id}/tasks/{task_id}
         * @param handler handler
         * @return Task
         */
        public Task executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Task>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public GetTaskOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        public static final String TASK_ID_PATH = "task_id";

        /**
         * @param taskId (String) The Task ID. (required)
         * @return operation
         */
        public GetTaskOper taskIdPath(Object taskId) {
            reqSpec.addPathParam(TASK_ID_PATH, taskId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetTaskOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetTaskOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get tasks for DAG
     * 
     *
     * @see #dagIdPath The DAG ID. (required)
     * return TaskCollection
     */
    public static class GetTasksOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/dags/{dag_id}/tasks";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetTasksOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /dags/{dag_id}/tasks
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /dags/{dag_id}/tasks
         * @param handler handler
         * @return TaskCollection
         */
        public TaskCollection executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<TaskCollection>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public GetTasksOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetTasksOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetTasksOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update a DAG
     * 
     *
     * @see #dagIdPath The DAG ID. (required)
     * @see #body  (required)
     * return DAG
     */
    public static class UpdateDagOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/dags/{dag_id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateDagOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /dags/{dag_id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /dags/{dag_id}
         * @param handler handler
         * @return DAG
         */
        public DAG executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<DAG>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param DAG (DAG)  (required)
         * @return operation
         */
        public UpdateDagOper body(DAG DAG) {
            reqSpec.setBody(DAG);
            return this;
        }

        public static final String DAG_ID_PATH = "dag_id";

        /**
         * @param dagId (String) The DAG ID. (required)
         * @return operation
         */
        public UpdateDagOper dagIdPath(Object dagId) {
            reqSpec.addPathParam(DAG_ID_PATH, dagId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateDagOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateDagOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}

/*
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.google.gson.reflect.TypeToken;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Pool;
import org.openapitools.client.model.PoolCollection;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.swagger.annotations.*;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import org.openapitools.client.JSON;
import static io.restassured.http.Method.*;

@Api(value = "Pool")
public class PoolApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private PoolApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static PoolApi pool(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new PoolApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createPool(),
                deletePool(),
                getPool(),
                getPools(),
                updatePool()
        );
    }

    @ApiOperation(value = "Create a pool",
            notes = "",
            nickname = "createPool",
            tags = { "Pool" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 400, message = "Client specified an invalid argument.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.")  })
    public CreatePoolOper createPool() {
        return new CreatePoolOper(createReqSpec());
    }

    @ApiOperation(value = "Delete a pool",
            notes = "",
            nickname = "deletePool",
            tags = { "Pool" })
    @ApiResponses(value = { 
            @ApiResponse(code = 204, message = "No content.") ,
            @ApiResponse(code = 400, message = "Client specified an invalid argument.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.")  })
    public DeletePoolOper deletePool() {
        return new DeletePoolOper(createReqSpec());
    }

    @ApiOperation(value = "Get a pool",
            notes = "",
            nickname = "getPool",
            tags = { "Pool" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public GetPoolOper getPool() {
        return new GetPoolOper(createReqSpec());
    }

    @ApiOperation(value = "Get all pools",
            notes = "",
            nickname = "getPools",
            tags = { "Pool" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "List of pools.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.")  })
    public GetPoolsOper getPools() {
        return new GetPoolsOper(createReqSpec());
    }

    @ApiOperation(value = "Update a pool",
            notes = "",
            nickname = "updatePool",
            tags = { "Pool" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Successful response.") ,
            @ApiResponse(code = 400, message = "Client specified an invalid argument.") ,
            @ApiResponse(code = 401, message = "Request not authenticated due to missing, invalid, authentication info.") ,
            @ApiResponse(code = 403, message = "Client does not have sufficient permission.") ,
            @ApiResponse(code = 404, message = "A specified resource is not found.")  })
    public UpdatePoolOper updatePool() {
        return new UpdatePoolOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public PoolApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Create a pool
     * 
     *
     * @see #body  (required)
     * return Pool
     */
    public static class CreatePoolOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/pools";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreatePoolOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /pools
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /pools
         * @param handler handler
         * @return Pool
         */
        public Pool executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Pool>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param pool (Pool)  (required)
         * @return operation
         */
        public CreatePoolOper body(Pool pool) {
            reqSpec.setBody(pool);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreatePoolOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreatePoolOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete a pool
     * 
     *
     * @see #poolNamePath The Pool name. (required)
     */
    public static class DeletePoolOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/pools/{pool_name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeletePoolOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /pools/{pool_name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String POOL_NAME_PATH = "pool_name";

        /**
         * @param poolName (String) The Pool name. (required)
         * @return operation
         */
        public DeletePoolOper poolNamePath(Object poolName) {
            reqSpec.addPathParam(POOL_NAME_PATH, poolName);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeletePoolOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeletePoolOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get a pool
     * 
     *
     * @see #poolNamePath The Pool name. (required)
     * return Pool
     */
    public static class GetPoolOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/pools/{pool_name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetPoolOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /pools/{pool_name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /pools/{pool_name}
         * @param handler handler
         * @return Pool
         */
        public Pool executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Pool>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String POOL_NAME_PATH = "pool_name";

        /**
         * @param poolName (String) The Pool name. (required)
         * @return operation
         */
        public GetPoolOper poolNamePath(Object poolName) {
            reqSpec.addPathParam(POOL_NAME_PATH, poolName);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetPoolOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetPoolOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get all pools
     * 
     *
     * @see #limitQuery The numbers of items to return. (optional, default to 100)
     * @see #offsetQuery The number of items to skip before starting to collect the result set. (optional)
     * return PoolCollection
     */
    public static class GetPoolsOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/pools";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetPoolsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /pools
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /pools
         * @param handler handler
         * @return PoolCollection
         */
        public PoolCollection executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<PoolCollection>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) The numbers of items to return. (optional, default to 100)
         * @return operation
         */
        public GetPoolsOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) The number of items to skip before starting to collect the result set. (optional)
         * @return operation
         */
        public GetPoolsOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetPoolsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetPoolsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update a pool
     * 
     *
     * @see #poolNamePath The Pool name. (required)
     * @see #body  (required)
     * @see #updateMaskQuery The fields to update on the connection (connection, pool etc). If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields.  (optional, default to new ArrayList&lt;String&gt;())
     * return Pool
     */
    public static class UpdatePoolOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/pools/{pool_name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdatePoolOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /pools/{pool_name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /pools/{pool_name}
         * @param handler handler
         * @return Pool
         */
        public Pool executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Pool>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param pool (Pool)  (required)
         * @return operation
         */
        public UpdatePoolOper body(Pool pool) {
            reqSpec.setBody(pool);
            return this;
        }

        public static final String POOL_NAME_PATH = "pool_name";

        /**
         * @param poolName (String) The Pool name. (required)
         * @return operation
         */
        public UpdatePoolOper poolNamePath(Object poolName) {
            reqSpec.addPathParam(POOL_NAME_PATH, poolName);
            return this;
        }

        public static final String UPDATE_MASK_QUERY = "update_mask";

        /**
         * @param updateMask (List&lt;String&gt;) The fields to update on the connection (connection, pool etc). If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields.  (optional, default to new ArrayList&lt;String&gt;())
         * @return operation
         */
        public UpdatePoolOper updateMaskQuery(Object... updateMask) {
            reqSpec.addQueryParam(UPDATE_MASK_QUERY, updateMask);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdatePoolOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdatePoolOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
